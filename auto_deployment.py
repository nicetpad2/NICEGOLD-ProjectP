# -*- coding: utf - 8 -* -
#!/usr/bin/env python3
import argparse
import json
import logging
import os
import shutil
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional

import yaml

"""
ЁЯЪА NICEGOLD Auto Deployment System
р╕гр╕░р╕Ър╕Ъ deploy р╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤р╕кр╕│р╕лр╕гр╕▒р╕Ъ NICEGOLD Enterprise
"""


class NiceGoldDeployment:
    """р╕гр╕░р╕Ър╕Ъ deployment р╕кр╕│р╕лр╕гр╕▒р╕Ъ NICEGOLD"""

    def __init__(self, repo_path: str = None):
        self.repo_path = Path(repo_path) if repo_path else Path.cwd()
        self.setup_logging()
        self.deployment_config = self.load_deployment_config()

    def setup_logging(self):
        """р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ logging"""
        log_dir = self.repo_path / "logs" / "deployment"
        log_dir.mkdir(parents=True, exist_ok=True)

        log_file = log_dir / f"deployment_{datetime.now().strftime('%Y%m%d')}.log"

        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s - %(levelname)s - %(message)s",
            handlers=[
                logging.FileHandler(log_file, encoding="utf - 8"),
                logging.StreamHandler(sys.stdout),
            ],
        )
        self.logger = logging.getLogger(__name__)

    def load_deployment_config(self) -> Dict:
        """р╣Вр╕лр╕ер╕Фр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ deployment"""
        config_path = self.repo_path / "config" / "deployment.yaml"

        default_config = {
            "version": "1.0.0",
            "git": {
                "auto_push": True,
                "branch": "main",
                "commit_prefix": "ЁЯЪА NICEGOLD",
                "ignore_patterns": [
                    "*.pyc",
                    "__pycache__",
                    "*.log",
                    "*.tmp",
                    ".env.local",
                    "node_modules",
                    ".DS_Store",
                ],
            },
            "backup": {"enabled": True, "keep_backups": 5, "backup_dir": "backups"},
            "validation": {
                "run_tests": True,
                "check_syntax": True,
                "check_dependencies": True,
            },
            "notifications": {"enabled": True, "on_success": True, "on_failure": True},
        }

        if config_path.exists():
            try:
                with open(config_path, "r", encoding="utf - 8") as f:
                    loaded_config = yaml.safe_load(f)
                default_config.update(loaded_config)
            except Exception as e:
                self.logger.warning(f"тЪая╕П Could not load config file: {e}")

        return default_config

    def save_deployment_config(self):
        """р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ deployment"""
        config_dir = self.repo_path / "config"
        config_dir.mkdir(exist_ok=True)

        config_path = config_dir / "deployment.yaml"

        try:
            with open(config_path, "w", encoding="utf - 8") as f:
                yaml.dump(
                    self.deployment_config,
                    f,
                    default_flow_style=False,
                    allow_unicode=True,
                )
            self.logger.info(f"тЬЕ Deployment config saved: {config_path}")
        except ImportError:
            # Fallback to JSON if PyYAML not available
            config_path = config_dir / "deployment.json"
            with open(config_path, "w", encoding="utf - 8") as f:
                json.dump(self.deployment_config, f, indent=2, ensure_ascii=False)
            self.logger.info(f"тЬЕ Deployment config saved as JSON: {config_path}")

    def run_command(self, command: List[str], cwd: Path = None) -> tuple[bool, str]:
        """р╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Йр╕Др╕│р╕кр╕▒р╣Ир╕З shell"""
        try:
            result = subprocess.run(
                command,
                cwd=cwd or self.repo_path,
                capture_output=True,
                text=True,
                timeout=300,
            )

            success = result.returncode == 0
            output = result.stdout if success else result.stderr

            if success:
                self.logger.debug(f"тЬЕ Command succeeded: {' '.join(command)}")
            else:
                self.logger.error(f"тЭМ Command failed: {' '.join(command)}")
                self.logger.error(f"Error: {output}")

            return success, output.strip()

        except subprocess.TimeoutExpired:
            self.logger.error(f"тП░ Command timed out: {' '.join(command)}")
            return False, "Command timed out"
        except Exception as e:
            self.logger.error(f"ЁЯТе Command error: {e}")
            return False, str(e)

    def cleanup_repository(self):
        """р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф repository"""
        self.logger.info("ЁЯз╣ Cleaning up repository...")

        ignore_patterns = self.deployment_config["git"]["ignore_patterns"]

        for pattern in ignore_patterns:
            if pattern.startswith("*."):
                # р╕ер╕Ър╣Др╕Яр╕ер╣Мр╕Хр╕▓р╕б extension
                extension = pattern[1:]  # р╕ер╕Ъ * р╕нр╕нр╕Б
                for file in self.repo_path.glob(f"**/*{extension}"):
                    try:
                        file.unlink()
                        self.logger.debug(f"Deleted: {file}")
                    except Exception as e:
                        self.logger.warning(f"Could not delete {file}: {e}")
            else:
                # р╕ер╕Ър╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╕лр╕гр╕╖р╕нр╣Др╕Яр╕ер╣М
                for item in self.repo_path.glob(f"**/{pattern}"):
                    try:
                        if item.is_dir():
                            shutil.rmtree(item)
                        else:
                            item.unlink()
                        self.logger.debug(f"Deleted: {item}")
                    except Exception as e:
                        self.logger.warning(f"Could not delete {item}: {e}")

        self.logger.info("тЬЕ Repository cleanup completed")

    def validate_deployment(self) -> bool:
        """р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╕Бр╣Ир╕нр╕Щ deployment"""
        self.logger.info("ЁЯФН Validating deployment...")

        validation_config = self.deployment_config["validation"]

        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ syntax
        if validation_config.get("check_syntax", True):
            if not self.check_python_syntax():
                return False

        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ dependencies
        if validation_config.get("check_dependencies", True):
            if not self.check_dependencies():
                return False

        # р╕гр╕▒р╕Щ tests
        if validation_config.get("run_tests", True):
            if not self.run_tests():
                self.logger.warning("тЪая╕П Tests failed, but continuing deployment...")

        self.logger.info("тЬЕ Validation completed")
        return True

    def check_python_syntax(self) -> bool:
        """р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Python syntax"""
        self.logger.info("ЁЯРН Checking Python syntax...")

        python_files = list(self.repo_path.glob("**/*.py"))
        errors = []

        for py_file in python_files:
            try:
                with open(py_file, "r", encoding="utf - 8") as f:
                    compile(f.read(), py_file, "exec")
            except SyntaxError as e:
                errors.append(f"{py_file}: {e}")
            except Exception as e:
                self.logger.warning(f"Could not check {py_file}: {e}")

        if errors:
            self.logger.error("тЭМ Python syntax errors found:")
            for error in errors:
                self.logger.error(f"  {error}")
            return False

        self.logger.info(
            f"тЬЕ Checked {len(python_files)} Python files - no syntax errors"
        )
        return True

    def check_dependencies(self) -> bool:
        """р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ dependencies"""
        self.logger.info("ЁЯУж Checking dependencies...")

        requirements_file = self.repo_path / "requirements.txt"

        if not requirements_file.exists():
            self.logger.warning("тЪая╕П requirements.txt not found")
            return True

        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ pip install р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Чр╕│р╣Др╕Фр╣Й
        success, output = self.run_command([sys.executable, " - m", "pip", "check"])

        if not success:
            self.logger.error(f"тЭМ Dependency check failed: {output}")
            return False

        self.logger.info("тЬЕ Dependencies check passed")
        return True

    def run_tests(self) -> bool:
        """р╕гр╕▒р╕Щ unit tests"""
        self.logger.info("ЁЯзк Running tests...")

        # р╕лр╕▓ test files
        test_files = (
            list(self.repo_path.glob("test_*.py"))
            + list(self.repo_path.glob("tests/**/*.py"))
            + list(self.repo_path.glob("**/test_*.py"))
        )

        if not test_files:
            self.logger.warning("тЪая╕П No test files found")
            return True

        # р╕гр╕▒р╕Щ pytest р╕Цр╣Йр╕▓р╕бр╕╡
        try:
            success, output = self.run_command(
                [sys.executable, " - m", "pytest", " - v", " -  - tb = short"]
            )

            if success:
                self.logger.info("тЬЕ All tests passed")
            else:
                self.logger.warning(f"тЪая╕П Some tests failed: {output}")

            return success

        except FileNotFoundError:
            # Fallback р╣Гр╕Кр╣Й unittest
            self.logger.info("pytest not found, using unittest...")

            for test_file in test_files:
                success, output = self.run_command([sys.executable, str(test_file)])

                if not success:
                    self.logger.warning(f"тЪая╕П Test failed: {test_file}")

            return True

    def create_backup(self) -> Optional[Path]:
        """р╕кр╕гр╣Йр╕▓р╕З backup р╕Бр╣Ир╕нр╕Щ deployment"""
        if not self.deployment_config["backup"]["enabled"]:
            return None

        self.logger.info("ЁЯТ╛ Creating backup...")

        backup_dir = self.repo_path / self.deployment_config["backup"]["backup_dir"]
        backup_dir.mkdir(exist_ok=True)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = f"nicegold_backup_{timestamp}"
        backup_path = backup_dir / f"{backup_name}.tar.gz"

        # р╕кр╕гр╣Йр╕▓р╕З tar archive
        success, output = self.run_command(
            [
                "tar",
                " - czf",
                str(backup_path),
                " -  - exclude = backups",
                " -  - exclude = logs",
                " -  - exclude = __pycache__",
                " -  - exclude = *.pyc",
                ".",
            ]
        )

        if success:
            self.logger.info(f"тЬЕ Backup created: {backup_path}")

            # р╕ер╕Ъ backup р╣Ар╕Бр╣Ир╕▓
            self.cleanup_old_backups(backup_dir)

            return backup_path
        else:
            self.logger.error(f"тЭМ Backup failed: {output}")
            return None

    def cleanup_old_backups(self, backup_dir: Path):
        """р╕ер╕Ъ backup р╣Ар╕Бр╣Ир╕▓"""
        keep_backups = self.deployment_config["backup"]["keep_backups"]

        backup_files = sorted(
            backup_dir.glob("nicegold_backup_*.tar.gz"),
            key=lambda x: x.stat().st_mtime,
            reverse=True,
        )

        if len(backup_files) > keep_backups:
            for old_backup in backup_files[keep_backups:]:
                try:
                    old_backup.unlink()
                    self.logger.info(f"ЁЯЧСя╕П Deleted old backup: {old_backup.name}")
                except Exception as e:
                    self.logger.warning(f"Could not delete {old_backup}: {e}")

    def git_commit_and_push(self, message: str = None) -> bool:
        """Commit р╣Бр╕ер╕░ Push р╣Др╕Ыр╕вр╕▒р╕З Git repository"""
        if not self.deployment_config["git"]["auto_push"]:
            self.logger.info("ЁЯЪл Auto push disabled")
            return True

        self.logger.info("ЁЯУЭ Committing and pushing to Git...")

        # р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ Git user р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Хр╕▒р╣Йр╕З
        success, _ = self.run_command(["git", "config", "user.name"])
        if not success:
            self.run_command(["git", "config", "user.name", "NICEGOLD Administrator"])

        success, _ = self.run_command(["git", "config", "user.email"])
        if not success:
            self.run_command(["git", "config", "user.email", "admin@nicegold.local"])

        # Add files
        success, _ = self.run_command(["git", "add", "."])
        if not success:
            self.logger.error("тЭМ Git add failed")
            return False

        # Create commit message
        if not message:
            timestamp = datetime.now().strftime("%Y - %m - %d %H:%M:%S")
            prefix = self.deployment_config["git"]["commit_prefix"]
            message = f"{prefix} Enterprise Auto - Deploy - {timestamp}"

        # Commit
        success, output = self.run_command(["git", "commit", " - m", message])
        if not success and "nothing to commit" not in output:
            self.logger.error(f"тЭМ Git commit failed: {output}")
            return False

        # Push
        branch = self.deployment_config["git"]["branch"]
        success, output = self.run_command(["git", "push", "origin", branch])

        if success:
            self.logger.info(f"тЬЕ Successfully pushed to {branch}")
            return True
        else:
            self.logger.error(f"тЭМ Git push failed: {output}")

            # р╕ер╕нр╕З force push
            self.logger.info("ЁЯФД Trying force push...")
            success, output = self.run_command(
                ["git", "push", " -  - force - with - lease", "origin", branch]
            )

            if success:
                self.logger.info(f"тЬЕ Force push successful")
                return True
            else:
                self.logger.error(f"тЭМ Force push failed: {output}")
                return False

    def send_notification(self, success: bool, message: str):
        """р╕кр╣Ир╕Зр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ"""
        if not self.deployment_config["notifications"]["enabled"]:
            return

        if success and not self.deployment_config["notifications"]["on_success"]:
            return

        if not success and not self.deployment_config["notifications"]["on_failure"]:
            return

        status = "тЬЕ SUCCESS" if success else "тЭМ FAILED"
        timestamp = datetime.now().strftime("%Y - %m - %d %H:%M:%S")

        notification = f"""
ЁЯЪА NICEGOLD Deployment {status}
тП░ Time: {timestamp}
ЁЯУЭ Message: {message}
"""

        # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕ер╕З log file
        notification_file = self.repo_path / "logs" / "deployment" / "notifications.log"
        notification_file.parent.mkdir(parents=True, exist_ok=True)

        with open(notification_file, "a", encoding="utf - 8") as f:
            f.write(f"{timestamp} - {notification}\n")

        self.logger.info(f"ЁЯУв Notification: {message}")

    def generate_deployment_report(self, start_time: datetime, success: bool) -> Dict:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕▓р╕вр╕Зр╕▓р╕Щ deployment"""
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()

        report = {
            "deployment_id": f"deploy_{start_time.strftime('%Y%m%d_%H%M%S')}",
            "timestamp": start_time.isoformat(),
            "duration_seconds": duration,
            "success": success,
            "config": self.deployment_config,
            "repository_path": str(self.repo_path),
            "git_info": self.get_git_info(),
        }

        return report

    def get_git_info(self) -> Dict:
        """р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е Git"""
        git_info = {}

        # Current branch
        success, branch = self.run_command(["git", "branch", " -  - show - current"])
        if success:
            git_info["branch"] = branch

        # Last commit
        success, commit = self.run_command(["git", "log", " - 1", " -  - oneline"])
        if success:
            git_info["last_commit"] = commit

        # Remote URL
        success, remote = self.run_command(["git", "remote", "get - url", "origin"])
        if success:
            git_info["remote_url"] = remote

        return git_info

    def save_deployment_report(self, report: Dict):
        """р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕гр╕▓р╕вр╕Зр╕▓р╕Щ deployment"""
        reports_dir = self.repo_path / "reports" / "deployment"
        reports_dir.mkdir(parents=True, exist_ok=True)

        report_file = reports_dir / f"{report['deployment_id']}.json"

        with open(report_file, "w", encoding="utf - 8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        self.logger.info(f"ЁЯУК Deployment report saved: {report_file}")

    def deploy(self, commit_message: str = None) -> bool:
        """р╣Ар╕гр╕┤р╣Ир╕бр╕Бр╕▓р╕г deployment"""
        start_time = datetime.now()

        self.logger.info("ЁЯЪА Starting NICEGOLD deployment...")

        try:
            # 1. Create backup
            backup_path = self.create_backup()

            # 2. Cleanup repository
            self.cleanup_repository()

            # 3. Validate deployment
            if not self.validate_deployment():
                self.send_notification(False, "Validation failed")
                return False

            # 4. Git commit and push
            if not self.git_commit_and_push(commit_message):
                self.send_notification(False, "Git push failed")
                return False

            # 5. Save configuration
            self.save_deployment_config()

            # Success
            self.logger.info("ЁЯОЙ Deployment completed successfully!")

            # Generate and save report
            report = self.generate_deployment_report(start_time, True)
            self.save_deployment_report(report)

            self.send_notification(True, "Deployment completed successfully")

            return True

        except Exception as e:
            self.logger.error(f"ЁЯТе Deployment failed: {e}")

            # Generate failure report
            report = self.generate_deployment_report(start_time, False)
            report["error"] = str(e)
            self.save_deployment_report(report)

            self.send_notification(False, f"Deployment failed: {e}")

            return False


def main():
    """р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕лр╕ер╕▒р╕Бр╕кр╕│р╕лр╕гр╕▒р╕Ъ CLI"""

    parser = argparse.ArgumentParser(description="NICEGOLD Auto Deployment System")
    parser.add_argument(" -  - message", " - m", help="Commit message")
    parser.add_argument(" -  - config", help="Path to deployment config file")
    parser.add_argument(
        " -  - no - backup", action="store_true", help="Skip backup creation"
    )
    parser.add_argument(" -  - no - push", action="store_true", help="Skip Git push")
    parser.add_argument(
        " -  - no - validation", action="store_true", help="Skip validation"
    )
    parser.add_argument(
        " -  - dry - run", action="store_true", help="Dry run (show what would be done)"
    )

    args = parser.parse_args()

    # р╕кр╕гр╣Йр╕▓р╕З deployment instance
    deployment = NiceGoldDeployment()

    # р╕Ыр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕З config р╕Хр╕▓р╕б arguments
    if args.no_backup:
        deployment.deployment_config["backup"]["enabled"] = False
    if args.no_push:
        deployment.deployment_config["git"]["auto_push"] = False
    if args.no_validation:
        deployment.deployment_config["validation"] = {
            "run_tests": False,
            "check_syntax": False,
            "check_dependencies": False,
        }

    if args.dry_run:
        logging.info("ЁЯФН Dry run mode - showing configuration:")
        logging.info(
            json.dumps(deployment.deployment_config, indent=2, ensure_ascii=False)
        )
        return

    # р╣Ар╕гр╕┤р╣Ир╕б deployment
    success = deployment.deploy(args.message)

    if success:
        logging.info("ЁЯОЙ Deployment completed successfully!")
        sys.exit(0)
    else:
        logging.error("тЭМ Deployment failed!")
        sys.exit(1)


if __name__ == "__main__":
    main()
