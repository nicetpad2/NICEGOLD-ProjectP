# -*- coding: utf-8 -*-
"""
NICEGOLD ProjectP - Menu System Module
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Interactive menu system with beautiful formatting and navigation.

Author: NICEGOLD Team
Version: 3.0
Created: 2025-01-05
"""

import time
from pathlib import Path
from typing import Any, Dict, List, Tuple

# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç import path
try:
    from src.commands.ai_commands import AICommands
    from src.commands.analysis_commands import AnalysisCommands
    from src.commands.pipeline_commands import PipelineCommands
    from src.commands.trading_commands import TradingCommands
    from src.core.colors import Colors, colorize
    from src.ui.animations import print_with_animation
except ImportError:
    # Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà run ‡∏à‡∏≤‡∏Å directory ‡∏≠‡∏∑‡πà‡∏ô
    import sys

    sys.path.append(".")
    from src.commands.ai_commands import AICommands
    from src.commands.analysis_commands import AnalysisCommands
    from src.commands.pipeline_commands import PipelineCommands
    from src.commands.trading_commands import TradingCommands
    from src.core.colors import Colors, colorize
    from src.ui.animations import print_with_animation


class MenuSection:
    """Menu section data structure"""

    def __init__(self, title: str, color: str, items: List[Tuple[str, str, str]]):
        self.title = title
        self.color = color
        self.items = items  # (number, title, description)


class MenuSystem:
    """Main menu system for ProjectP"""

    def __init__(self, project_root=None, csv_manager=None, logger=None):
        self.menu_sections = self._create_menu_sections()
        self.project_root = project_root or Path(__file__).parent.parent.parent

        # Initialize command handlers
        self.pipeline_commands = PipelineCommands(
            self.project_root, csv_manager, logger
        )
        self.analysis_commands = AnalysisCommands(
            self.project_root, csv_manager, logger
        )
        self.trading_commands = TradingCommands(self.project_root, csv_manager, logger)
        self.ai_commands = AICommands(self.project_root, csv_manager, logger)

    def _create_menu_sections(self) -> List[MenuSection]:
        """Create all menu sections"""
        return [
            MenuSection(
                title="üöÄ Core Pipeline Modes (‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å)",
                color=Colors.BRIGHT_GREEN,
                items=[
                    ("1", "Full Pipeline", "‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô (Production Ready)"),
                    (
                        "2",
                        "Production Pipeline",
                        "‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á: Modern ML Pipeline (New!)",
                    ),
                    ("3", "Debug Pipeline", "‡πÇ‡∏´‡∏°‡∏î‡∏î‡∏µ‡∏ö‡∏±‡∏Å: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î (Detailed Logs)"),
                    ("4", "Quick Test", "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡πá‡∏ß: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πà‡∏≠‡∏¢ (Development)"),
                ],
            ),
            MenuSection(
                title="üìä Data Processing (‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)",
                color=Colors.BRIGHT_BLUE,
                items=[
                    ("5", "Load & Validate Data", "‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å datacsv"),
                    ("6", "Feature Engineering", "‡∏™‡∏£‡πâ‡∏≤‡∏á Technical Indicators"),
                    ("7", "Preprocess Only", "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ML"),
                ],
            ),
            MenuSection(
                title="ü§ñ Machine Learning (‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)",
                color=Colors.BRIGHT_MAGENTA,
                items=[
                    ("8", "Train Models", "‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• ML (AutoML + Optimization)"),
                    ("9", "Model Comparison", "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ"),
                    ("10", "Predict & Backtest", "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞ Backtest"),
                ],
            ),
            MenuSection(
                title="üìà Advanced Analytics (‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á)",
                color=Colors.BRIGHT_CYAN,
                items=[
                    ("11", "Live Trading Simulation", "‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏ö‡∏ö Real-time"),
                    ("12", "Performance Analysis", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"),
                    ("13", "Risk Management", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞ Portfolio"),
                ],
            ),
            MenuSection(
                title="üñ•Ô∏è Monitoring & Services (‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£)",
                color=Colors.BRIGHT_YELLOW,
                items=[
                    ("14", "Web Dashboard", "‡πÄ‡∏õ‡∏¥‡∏î Streamlit Dashboard"),
                    ("15", "API Server", "‡πÄ‡∏õ‡∏¥‡∏î FastAPI Model Server"),
                    ("16", "Real-time Monitor", "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö Real-time"),
                ],
            ),
            MenuSection(
                title="ü§ñ AI Agents (‡∏£‡∏∞‡∏ö‡∏ö AI Agents)",
                color=Colors.BRIGHT_MAGENTA,
                items=[
                    ("17", "AI Project Analysis", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏î‡πâ‡∏ß‡∏¢ AI"),
                    ("18", "AI Auto-Fix System", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ AI"),
                    ("19", "AI Performance Optimizer", "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ AI"),
                    ("20", "AI Executive Summary", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ AI"),
                    ("21", "AI Agents Dashboard", "‡πÄ‡∏õ‡∏¥‡∏î AI Agents Web Interface"),
                ],
            ),
            MenuSection(
                title="‚öôÔ∏è System Management (‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö)",
                color=Colors.BRIGHT_RED,
                items=[
                    ("22", "System Health Check", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"),
                    ("23", "Install Dependencies", "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"),
                    ("24", "Clean & Reset", "‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö"),
                    ("25", "View Logs & Results", "‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞ Log Files"),
                ],
            ),
        ]

    def print_main_menu(self) -> str:
        """Display the main interactive menu with beautiful colors and animations"""
        print("\n" + "=" * 80)
        print_with_animation(colorize("üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...", Colors.BRIGHT_CYAN), 0.01)
        time.sleep(0.5)

        # Header
        self._print_header()

        # Print each menu section
        for section in self.menu_sections:
            self._print_section(section)

        # Footer
        self._print_footer()

        # Interactive prompt
        self._print_prompt()

        return input(
            f"\n{colorize('üéØ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:', Colors.BOLD + Colors.BRIGHT_WHITE)} {colorize('‚ñ∂Ô∏è', Colors.BRIGHT_GREEN)} "
        ).strip()

    def _print_header(self) -> None:
        """Print menu header"""
        header = f"""
{colorize('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó', Colors.BRIGHT_YELLOW)}
{colorize('‚ïë', Colors.BRIGHT_YELLOW)} {colorize('üéØ NICEGOLD ProjectP - ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å (MAIN MENU)', Colors.BOLD + Colors.BRIGHT_WHITE)} {colorize('‚ïë', Colors.BRIGHT_YELLOW)}
{colorize('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£', Colors.BRIGHT_YELLOW)}
{colorize('‚ïë', Colors.BRIGHT_YELLOW)}                                                                               {colorize('‚ïë', Colors.BRIGHT_YELLOW)}"""
        print(header)

    def _print_section(self, section: MenuSection) -> None:
        """Print a menu section"""
        print(
            f"{colorize('‚ïë', Colors.BRIGHT_YELLOW)}  {colorize(section.title, section.color)} {colorize('‚ïë', Colors.BRIGHT_YELLOW)}"
        )
        print(
            f"{colorize('‚ïë', Colors.BRIGHT_YELLOW)}                                                                               {colorize('‚ïë', Colors.BRIGHT_YELLOW)}"
        )

        for num, title, desc in section.items:
            # Create emoji number
            emoji_num = self._get_emoji_number(num)

            print(
                f"{colorize('‚ïë', Colors.BRIGHT_YELLOW)}  {colorize(emoji_num, Colors.BRIGHT_WHITE)}  {colorize(title, Colors.BOLD + Colors.WHITE):<20} - {colorize(desc, Colors.DIM + Colors.WHITE)} {colorize('‚ïë', Colors.BRIGHT_YELLOW)}"
            )

        print(
            f"{colorize('‚ïë', Colors.BRIGHT_YELLOW)}                                                                               {colorize('‚ïë', Colors.BRIGHT_YELLOW)}"
        )

    def _get_emoji_number(self, num: str) -> str:
        """Convert number to emoji"""
        emoji_map = {
            "0": "0Ô∏è‚É£",
            "1": "1Ô∏è‚É£",
            "2": "2Ô∏è‚É£",
            "3": "3Ô∏è‚É£",
            "4": "4Ô∏è‚É£",
            "5": "5Ô∏è‚É£",
            "6": "6Ô∏è‚É£",
            "7": "7Ô∏è‚É£",
            "8": "8Ô∏è‚É£",
            "9": "9Ô∏è‚É£",
        }

        if len(num) == 1:
            return emoji_map.get(num, num)
        elif len(num) == 2:
            if num == "10":
                return "üîü"
            else:
                return emoji_map.get(num[0], num[0]) + emoji_map.get(num[1], num[1])
        return num

    def _print_footer(self) -> None:
        """Print menu footer"""
        footer = f"""
{colorize('‚ïë', Colors.BRIGHT_YELLOW)}  {colorize('0Ô∏è‚É£', Colors.BRIGHT_WHITE)}  {colorize('Exit', Colors.BOLD + Colors.WHITE):<20} - {colorize('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°', Colors.DIM + Colors.WHITE)} {colorize('‚ïë', Colors.BRIGHT_YELLOW)}
{colorize('‚ïë', Colors.BRIGHT_YELLOW)}                                                                               {colorize('‚ïë', Colors.BRIGHT_YELLOW)}
{colorize('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù', Colors.BRIGHT_YELLOW)}"""
        print(footer)

    def _print_prompt(self) -> None:
        """Print interactive prompt"""
        print(
            f"\n{colorize('üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:', Colors.BRIGHT_BLUE)} ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç {colorize('1-25', Colors.BRIGHT_GREEN)} ‡∏´‡∏£‡∏∑‡∏≠ {colorize('0', Colors.BRIGHT_RED)} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å"
        )
        print(
            f"{colorize('üìã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:', Colors.BRIGHT_BLUE)} {colorize('‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', Colors.BRIGHT_GREEN)} | {colorize('üìÅ Data:', Colors.BRIGHT_BLUE)} {colorize('datacsv/', Colors.BRIGHT_CYAN)}"
        )

    def validate_choice(self, choice: str) -> bool:
        """Validate user menu choice"""
        valid_choices = set(["0"])  # Add exit option

        # Add all menu item numbers
        for section in self.menu_sections:
            for num, _, _ in section.items:
                valid_choices.add(num)

        return choice in valid_choices

    def get_choice_description(self, choice: str) -> str:
        """Get description for a menu choice"""
        if choice == "0":
            return "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"

        for section in self.menu_sections:
            for num, title, desc in section.items:
                if num == choice:
                    return f"{title} - {desc}"

        return "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"

    def run_main_menu(self) -> None:
        """Run the main menu loop"""
        while True:
            try:
                choice = self.print_main_menu()

                if choice.lower() in ["0", "q", "quit", "exit"]:
                    print(
                        f"\n{colorize('üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ NICEGOLD ProjectP!', Colors.BRIGHT_MAGENTA)}"
                    )
                    break

                if not self.validate_choice(choice):
                    print(
                        f"{colorize('‚ùå ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', Colors.BRIGHT_RED)}"
                    )
                    continue

                # Execute the chosen command
                success = self.handle_menu_choice(choice)

                if success:
                    print(f"\n{colorize('‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!', Colors.BRIGHT_GREEN)}")
                else:
                    print(
                        f"\n{colorize('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs', Colors.BRIGHT_RED)}"
                    )

                # Wait for user to continue
                input(f"\n{colorize('‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...', Colors.DIM)}")

            except KeyboardInterrupt:
                print(f"\n{colorize('üëã ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', Colors.BRIGHT_YELLOW)}")
                break
            except Exception as e:
                print(f"{colorize('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:', Colors.BRIGHT_RED)} {e}")
                input(f"\n{colorize('‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...', Colors.DIM)}")

    def handle_menu_choice(self, choice: str) -> bool:
        """Handle menu choice execution"""
        print(
            f"\n{colorize('‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:', Colors.BRIGHT_CYAN)} {self.get_choice_description(choice)}"
        )
        print(f"{colorize('‚ïê' * 80, Colors.DIM)}")

        # Core Pipeline Modes (1-4)
        if choice == "1":
            return self.pipeline_commands.full_pipeline()
        elif choice == "2":
            return self.pipeline_commands.production_pipeline()
        elif choice == "3":
            return self.pipeline_commands.full_pipeline()  # Debug mode
        elif choice == "4":
            return self.pipeline_commands.preprocessing_only()

        # Data Processing (5-7)
        elif choice == "5":
            return self.analysis_commands.data_analysis_statistics()
        elif choice == "6":
            return self.pipeline_commands.preprocessing_only()
        elif choice == "7":
            return self.pipeline_commands.preprocessing_only()

        # Machine Learning (8-10)
        elif choice == "8":
            return self.pipeline_commands.ultimate_pipeline()
        elif choice == "9":
            return self.analysis_commands.model_comparison()
        elif choice == "10":
            return self.pipeline_commands.realistic_backtest()

        # Advanced Analytics (11-13)
        elif choice == "11":
            return self.trading_commands.start_live_simulation()
        elif choice == "12":
            return self.analysis_commands.performance_analysis()
        elif choice == "13":
            return self.analysis_commands.risk_analysis()

        # Monitoring & Services (14-16)
        elif choice == "14":
            return self.ai_commands.web_dashboard()
        elif choice == "15":
            return self._start_api_server()
        elif choice == "16":
            return self.trading_commands.start_monitoring()

        # AI Agents (17-21)
        elif choice == "17":
            return self.ai_commands.project_analysis()
        elif choice == "18":
            return self.ai_commands.run_ai_autofix()
        elif choice == "19":
            return self.ai_commands.run_ai_optimization()
        elif choice == "20":
            return self.ai_commands.executive_summary()
        elif choice == "21":
            return self.ai_commands.show_ai_dashboard()

        # System Management (22-25)
        elif choice == "22":
            return self._system_health_check()
        elif choice == "23":
            return self._install_dependencies()
        elif choice == "24":
            return self._clean_and_reset()
        elif choice == "25":
            return self._view_logs_and_results()

        else:
            print(f"{colorize('‚ùå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ implement', Colors.BRIGHT_RED)}")
            return False

    def _start_api_server(self) -> bool:
        """Start FastAPI server"""
        print(f"{colorize('üöÄ Starting FastAPI Server...', Colors.BRIGHT_GREEN)}")
        return self.pipeline_commands.run_command(
            ["python", "api_server.py"], "FastAPI Model Server"
        )

    def _system_health_check(self) -> bool:
        """Run system health check"""
        print(f"{colorize('üè• Running System Health Check...', Colors.BRIGHT_BLUE)}")
        # Implementation would use health monitor
        return True

    def _install_dependencies(self) -> bool:
        """Install required dependencies"""
        print(f"{colorize('üì¶ Installing Dependencies...', Colors.BRIGHT_YELLOW)}")
        return self.pipeline_commands.run_command(
            ["pip", "install", "-r", "requirements.txt"], "Installing Dependencies"
        )

    def _clean_and_reset(self) -> bool:
        """Clean and reset system"""
        print(f"{colorize('üßπ Cleaning System...', Colors.BRIGHT_RED)}")
        return self.pipeline_commands.run_command(
            [
                "python",
                "-c",
                "import shutil; import os; [shutil.rmtree(d) for d in ['output_default', '__pycache__'] if os.path.exists(d)]",
            ],
            "System Cleanup",
        )

    def _view_logs_and_results(self) -> bool:
        """View logs and results"""
        print(f"{colorize('üìã Viewing Logs and Results...', Colors.BRIGHT_CYAN)}")
        # Implementation would show logs directory
        return True


# Global menu system instance
menu_system = MenuSystem()


def print_main_menu() -> str:
    """Display the main menu (compatibility function)"""
    return menu_system.print_main_menu()


def validate_menu_choice(choice: str) -> bool:
    """Validate menu choice (compatibility function)"""
    return menu_system.validate_choice(choice)


def get_menu_description(choice: str) -> str:
    """Get menu choice description (compatibility function)"""
    return menu_system.get_choice_description(choice)
