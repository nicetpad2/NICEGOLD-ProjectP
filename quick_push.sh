#!/bin/bash
# -*- coding: utf-8 -*-
# üöÄ NICEGOLD Quick Push Script
# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö push ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á GitHub repository

set -e  # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ error

# ‡∏™‡∏µ ANSI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö output ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
print_header() {
    echo -e "${PURPLE}================================${NC}"
    echo -e "${PURPLE}üöÄ NICEGOLD GitHub Push Manager${NC}"
    echo -e "${PURPLE}================================${NC}"
}

print_step() {
    echo -e "${CYAN}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
check_directory() {
    if [[ ! -d ".git" ]]; then
        print_error "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ .git - ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå repository"
        exit 1
    fi
    
    if [[ ! -f "ADMIN_GUIDE.md" ]]; then
        print_warning "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå ADMIN_GUIDE.md - ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå NICEGOLD"
    fi
}

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Git user (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á)
setup_git_user() {
    print_step "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Git user..."
    
    if ! git config user.name > /dev/null 2>&1; then
        git config user.name "NICEGOLD Administrator"
        print_success "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Git username: NICEGOLD Administrator"
    fi
    
    if ! git config user.email > /dev/null 2>&1; then
        git config user.email "admin@nicegold.local"
        print_success "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Git email: admin@nicegold.local"
    fi
}

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Git
check_git_status() {
    print_step "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ repository..."
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö branch ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    CURRENT_BRANCH=$(git branch --show-current)
    print_success "Branch ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $CURRENT_BRANCH"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö remote
    if git remote get-url origin > /dev/null 2>&1; then
        REMOTE_URL=$(git remote get-url origin)
        print_success "Remote URL: $REMOTE_URL"
    else
        print_error "‡πÑ‡∏°‡πà‡∏û‡∏ö remote origin"
        exit 1
    fi
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    if [[ -n $(git status --porcelain) ]]; then
        print_success "‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á:"
        git status --short
    else
        print_warning "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"
        echo -e "${YELLOW}‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ push ‡πÅ‡∏ö‡∏ö force ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n)${NC}"
        read -r FORCE_PUSH
        if [[ $FORCE_PUSH != "y" && $FORCE_PUSH != "Y" ]]; then
            print_success "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£ push"
            exit 0
        fi
    fi
}

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ staging area
add_files() {
    print_step "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ staging area..."
    
    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏¢‡∏∞‡∏Å‡πà‡∏≠‡∏ô
    find . -name "*.pyc" -delete 2>/dev/null || true
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    find . -name ".DS_Store" -delete 2>/dev/null || true
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    git add .
    
    print_success "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
    
    # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞ commit
    if [[ -n $(git diff --cached --name-only) ]]; then
        print_success "‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞ commit:"
        git diff --cached --name-only | head -20
        
        TOTAL_FILES=$(git diff --cached --name-only | wc -l)
        if [[ $TOTAL_FILES -gt 20 ]]; then
            print_warning "... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å $(($TOTAL_FILES - 20)) ‡πÑ‡∏ü‡∏•‡πå"
        fi
    fi
}

# ‡∏™‡∏£‡πâ‡∏≤‡∏á commit message
create_commit_message() {
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    
    if [[ -z $1 ]]; then
        COMMIT_MESSAGE="üöÄ NICEGOLD Enterprise Update - $TIMESTAMP"
    else
        COMMIT_MESSAGE="$1"
    fi
    
    # ‡∏ô‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    CHANGED_FILES=$(git diff --cached --name-only | wc -l)
    
    COMMIT_DESCRIPTION="üìù Updated $CHANGED_FILES files in NICEGOLD Enterprise system

üîß Changes include:
- System improvements and bug fixes
- Configuration updates
- Documentation updates
- Feature enhancements

‚ö° Auto-generated commit from NICEGOLD push script
üïí Timestamp: $TIMESTAMP"

    echo "$COMMIT_MESSAGE" > /tmp/commit_msg.txt
    echo "" >> /tmp/commit_msg.txt
    echo "$COMMIT_DESCRIPTION" >> /tmp/commit_msg.txt
}

# Commit ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
commit_changes() {
    print_step "‡∏Å‡∏≥‡∏•‡∏±‡∏á commit ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á..."
    
    create_commit_message "$1"
    
    if git commit -F /tmp/commit_msg.txt; then
        print_success "Commit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"
        rm -f /tmp/commit_msg.txt
    else
        print_error "Commit ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        rm -f /tmp/commit_msg.txt
        exit 1
    fi
}

# Sync ‡∏Å‡∏±‡∏ö remote
sync_with_remote() {
    print_step "‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Å‡∏±‡∏ö remote repository..."
    
    # Fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if git fetch origin; then
        print_success "Fetch ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    else
        print_warning "Fetch ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"
    fi
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ commits ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å remote ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u} 2>/dev/null || echo "")
    
    if [[ -n $REMOTE && $LOCAL != $REMOTE ]]; then
        print_step "‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å remote - ‡∏Å‡∏≥‡∏•‡∏±‡∏á pull..."
        if git pull origin $(git branch --show-current); then
            print_success "Pull ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        else
            print_warning "Pull ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏≠‡∏≤‡∏à‡∏°‡∏µ conflict"
            print_warning "‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç conflict ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á"
            exit 1
        fi
    fi
}

# Push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á remote
push_to_remote() {
    print_step "‡∏Å‡∏≥‡∏•‡∏±‡∏á push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á remote repository..."
    
    CURRENT_BRANCH=$(git branch --show-current)
    
    if git push origin $CURRENT_BRANCH; then
        print_success "Push ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ"
        
        # ‡πÅ‡∏™‡∏î‡∏á URL ‡∏Ç‡∏≠‡∏á repository
        REMOTE_URL=$(git remote get-url origin)
        if [[ $REMOTE_URL == *"github.com"* ]]; then
            REPO_URL=$(echo $REMOTE_URL | sed 's/\.git$//' | sed 's/git@github\.com:/https:\/\/github.com\//')
            print_success "‡∏î‡∏π repository ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: $REPO_URL"
        fi
    else
        print_error "Push ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        
        print_warning "‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ force push ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n)"
        read -r USE_FORCE
        
        if [[ $USE_FORCE == "y" || $USE_FORCE == "Y" ]]; then
            print_step "‡∏Å‡∏≥‡∏•‡∏±‡∏á force push..."
            if git push --force-with-lease origin $CURRENT_BRANCH; then
                print_success "Force push ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ"
            else
                print_error "Force push ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
                exit 1
            fi
        else
            exit 1
        fi
    fi
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
main() {
    print_header
    
    check_directory
    setup_git_user
    check_git_status
    add_files
    commit_changes "$1"
    sync_with_remote
    push_to_remote
    
    print_success "‡∏Å‡∏≤‡∏£ push ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! üöÄ"
}

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$1"
fi
