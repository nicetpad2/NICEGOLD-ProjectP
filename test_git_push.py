# -*- coding: utf - 8 -* - 
#!/usr/bin/env python3
from datetime import datetime
from pathlib import Path
import os
import subprocess
import sys
"""
üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Git Push ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NICEGOLD
"""


def run_command(command, cwd = None):
    """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
    try:
        result = subprocess.run(
            command, 
            shell = True, 
            cwd = cwd or os.getcwd(), 
            capture_output = True, 
            text = True, 
            timeout = 60
        )

        return result.returncode == 0, result.stdout.strip(), result.stderr.strip()
    except Exception as e:
        return False, "", str(e)

def test_git_functionality():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Git"""
    print("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Git...")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Git version
    success, output, error = run_command("git - - version")
    if success:
        print(f"‚úÖ Git version: {output}")
    else:
        print(f"‚ùå Git not available: {error}")
        return False

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Git repository
    success, output, error = run_command("git rev - parse - - is - inside - work - tree")
    if success and output == "true":
        print("‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Git repository")
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Git repository: {error}")
        return False

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö remote
    success, output, error = run_command("git remote -v")
    if success and output:
        print(f"‚úÖ Git remotes:\n{output}")
    else:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö remote repositories: {error}")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö branch ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    success, output, error = run_command("git branch - - show - current")
    if success:
        print(f"‚úÖ Current branch: {output}")
    else:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á branch ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {error}")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    success, output, error = run_command("git status - - porcelain")
    if success:
        if output:
            lines = output.split('\n')
            print(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {len(lines)} ‡πÑ‡∏ü‡∏•‡πå")
            # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå 5 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
            for line in lines[:5]:
                print(f"  {line}")
            if len(lines) > 5:
                print(f"  ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(lines) - 5} ‡πÑ‡∏ü‡∏•‡πå")
        else:
            print("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á")
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {error}")

    return True

def test_git_config():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Git"""
    print("\n‚öôÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Git...")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user.name
    success, output, error = run_command("git config user.name")
    if success and output:
        print(f"‚úÖ Git user.name: {output}")
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö user.name - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤...")
        run_command("git config user.name 'NICEGOLD Administrator'")
        print("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ user.name ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user.email
    success, output, error = run_command("git config user.email")
    if success and output:
        print(f"‚úÖ Git user.email: {output}")
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö user.email - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤...")
        run_command("git config user.email 'admin@nicegold.local'")
        print("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ user.email ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def test_file_operations():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå"""
    print("\nüìÅ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå...")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_file = Path("test_push_functionality.txt")
    timestamp = datetime.now().strftime("%Y - %m - %d %H:%M:%S")

    content = f"""üß™ NICEGOLD Git Push Test File
Created: {timestamp}
Repository: NICEGOLD - ProjectP
Purpose: Testing Git push functionality

This file was created automatically to test the Git push system.
"""

    try:
        with open(test_file, 'w', encoding = 'utf - 8') as f:
            f.write(content)
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {test_file}")

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ Git
        success, output, error = run_command(f"git add {test_file}")
        if success:
            print("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ staging area")
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå: {error}")
            return False

        return True

    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")
        return False

def test_commit():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ commit"""
    print("\nüíæ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ commit...")

    timestamp = datetime.now().strftime("%Y - %m - %d %H:%M:%S")
    commit_message = f"üß™ Test commit for Git push functionality - {timestamp}"

    success, output, error = run_command(f'git commit -m "{commit_message}"')

    if success:
        print("‚úÖ Commit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    elif "nothing to commit" in error:
        print("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞ commit")
        return True
    else:
        print(f"‚ùå Commit ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {error}")
        return False

def test_push_dry_run():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö push ‡πÅ‡∏ö‡∏ö dry run"""
    print("\nüöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö push (dry run)...")

    success, output, error = run_command("git push - - dry - run origin main")

    if success:
        print("‚úÖ Push dry run ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        print(f"Output: {output}")
        return True
    else:
        print(f"‚ö†Ô∏è Push dry run warning/error: {error}")
        # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô warning ‡∏õ‡∏Å‡∏ï‡∏¥
        return True

def cleanup_test_files():
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("\nüßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö...")

    test_file = Path("test_push_functionality.txt")
    if test_file.exists():
        try:
            test_file.unlink()
            print("‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Git Push ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NICEGOLD")
    print(" = " * 60)

    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Git
        if not test_git_functionality():
            print("\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Git ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            return False

        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Git
        test_git_config()

        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
        if not test_file_operations():
            print("\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            return False

        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö commit
        if not test_commit():
            print("\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö commit ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            return False

        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö push (dry run)
        test_push_dry_run()

        print("\n" + " = " * 60)
        print("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print("\n‡∏£‡∏∞‡∏ö‡∏ö Git ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ:")
        print("  ./quick_push.sh                 # Push ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢")
        print("  python git_manager.py - - action smart - push  # Push ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")
        print("  python auto_deployment.py       # Deploy ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")

        return True

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
        return False
    except Exception as e:
        print(f"\nüí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")
        return False
    finally:
        cleanup_test_files()

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)