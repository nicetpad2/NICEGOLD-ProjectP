#!/usr/bin/env python3
from pathlib import Path
        from sklearn.ensemble import RandomForestClassifier
        from sklearn.model_selection import cross_val_score
        from sklearn.preprocessing import StandardScaler
import numpy as np
import os
import pandas as pd
        import sklearn
import sys
import warnings
"""
Quick Fix for NaN AUC Issue
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡∏û‡∏•‡∏±‡∏ô Random Forest AUC = nan
"""


warnings.filterwarnings('ignore')

def simple_nan_auc_fix():
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ NaN AUC ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô"""
    print(" =  = = QUICK NaN AUC FIX = =  = ")

    try:
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á synthetic data ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        print("Creating clean synthetic data...")
        np.random.seed(42)
        n = 1000

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á features ‡∏ó‡∏µ‡πà‡∏°‡∏µ correlation ‡∏Å‡∏±‡∏ö target
        X1 = np.random.randn(n)
        X2 = np.random.randn(n) + 0.5 * X1  # correlated with X1
        X3 = np.random.randn(n)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á target ‡∏ó‡∏µ‡πà‡∏°‡∏µ relationship ‡∏Å‡∏±‡∏ö features
        target_logit = 0.3 * X1 + 0.2 * X2 + 0.1 * X3 + np.random.randn(n) * 0.5
        target = (target_logit > 0).astype(int)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
        df = pd.DataFrame({
            'feature1': X1, 
            'feature2': X2, 
            'feature3': X3, 
            'target': target
        })

        print(f"Data shape: {df.shape}")
        print(f"Target distribution: {df['target'].value_counts().to_dict()}")

        # 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Random Forest

        X = df[['feature1', 'feature2', 'feature3']]
        y = df['target']

        # Scale features
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # Test Random Forest
        rf = RandomForestClassifier(
            n_estimators = 50, 
            max_depth = 5, 
            class_weight = 'balanced', 
            random_state = 42
        )

        scores = cross_val_score(rf, X_scaled, y, cv = 3, scoring = 'roc_auc')
        auc_mean = scores.mean()

        print(f"Random Forest AUC: {auc_mean:.4f}")

        if not np.isnan(auc_mean) and auc_mean > 0.5:
            print("‚úÖ SUCCESS: Random Forest working properly!")
            print(f"‚úÖ AUC Score: {auc_mean:.4f}")
            return True
        else:
            print(f"‚ùå FAILED: AUC = {auc_mean}")
            return False

    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False

def diagnose_existing_data():
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå data ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
    print("\n =  = = DIAGNOSING EXISTING DATA = =  = ")

    data_files = ['dummy_m1.csv', 'dummy_m15.csv']

    for file_path in data_files:
        if os.path.exists(file_path):
            try:
                df = pd.read_csv(file_path)
                print(f"\nüìÅ File: {file_path}")
                print(f"üìä Shape: {df.shape}")
                print(f"üìã Columns: {list(df.columns)}")

                if 'target' in df.columns:
                    target_dist = df['target'].value_counts()
                    print(f"üéØ Target distribution: {target_dist.to_dict()}")

                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö class imbalance
                    min_count = target_dist.min()
                    max_count = target_dist.max()
                    ratio = max_count / min_count if min_count > 0 else float('inf')
                    print(f"‚öñÔ∏è Imbalance ratio: {ratio:.1f}:1")

                    if ratio > 100:
                        print("‚ùå CRITICAL: Extreme class imbalance detected!")
                        print("üí° This is likely causing NaN AUC scores")

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö data quality
                nan_count = df.isnull().sum().sum()
                if nan_count > 0:
                    print(f"‚ö†Ô∏è NaN values: {nan_count}")

                print("‚úÖ Data loaded successfully")

            except Exception as e:
                print(f"‚ùå Error loading {file_path}: {e}")
        else:
            print(f"‚ùå File not found: {file_path}")

def main():
    """Main function"""
    print("QUICK NaN AUC DIAGNOSTIC & FIX")
    print(" = " * 40)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö sklearn
    try:
        print(f"‚úÖ sklearn version: {sklearn.__version__}")
    except ImportError:
        print("‚ùå sklearn not installed!")
        print("Please install: pip install scikit - learn")
        return

    # 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö synthetic data
    success = simple_nan_auc_fix()

    # 2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå data ‡∏à‡∏£‡∏¥‡∏á
    diagnose_existing_data()

    # 3. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    print("\n" + " = " * 40)
    print("RECOMMENDATIONS FOR NaN AUC FIX:")
    print(" = " * 40)

    if success:
        print("‚úÖ Your environment works with synthetic data")
        print("The NaN AUC issue is likely due to:")
        print("  1. Extreme class imbalance in your real data")
        print("  2. Features with no predictive power")
        print("  3. Data quality issues (NaN, infinite values)")

        print("\nüí° Solutions:")
        print("  1. Use SMOTE for balancing classes")
        print("  2. Create better engineered features")
        print("  3. Use class_weight = 'balanced' in models")
        print("  4. Try threshold optimization")
        print("  5. Ensure minimum samples per class")

    else:
        print("‚ùå Even synthetic data failed")
        print("This suggests environment issues:")
        print("  1. Check sklearn installation")
        print("  2. Check Python version compatibility")
        print("  3. Try reinstalling packages")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    output_dir = Path("output_default")
    output_dir.mkdir(exist_ok = True)

    with open(output_dir / "quick_nan_auc_diagnosis.txt", "w") as f:
        f.write(f"Quick NaN AUC Fix Result: {'SUCCESS' if success else 'FAILED'}\n")
        f.write(f"Timestamp: {pd.Timestamp.now()}\n")
        f.write(f"Synthetic data test: {'PASSED' if success else 'FAILED'}\n")

    print(f"\nüìÅ Results saved to: {output_dir / 'quick_nan_auc_diagnosis.txt'}")

if __name__ == "__main__":
    main()