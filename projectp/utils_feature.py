
import os
import pandas as pd
import sys
SELECTED_FEATURES = None

def get_feature_target_columns(df: pd.DataFrame) -> tuple[list[str], str]:
    feature_cols = [c for c in df.columns if c not in ['target_event', 'target_direction', 'Date', 'Time', 'Symbol', 'datetime', 'target', 'pred_proba'] and df[c].dtype != 'O']
    global SELECTED_FEATURES
    if SELECTED_FEATURES:
        feature_cols = [c for c in feature_cols if c in SELECTED_FEATURES]
    # Debug: print columns for troubleshooting
    print(f"[DEBUG] Columns in features file: {list(df.columns)}")
    if 'target_event' in df.columns:
        target_col = 'target_event'
    elif 'target_direction' in df.columns:
        target_col = 'target_direction'
    elif 'target' in df.columns:
        target_col = 'target'
    else:
        raise ValueError('‡πÑ‡∏°‡πà‡∏û‡∏ö target ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå feature engineered')
    return feature_cols, target_col

def ensure_super_features_file() -> str:
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå features ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ó‡∏û/robust):
    - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ output_default/preprocessed_super.parquet ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
    - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ features_main.json ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ (feature list)
    - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á error ‡∏û‡∏£‡πâ‡∏≠‡∏° UX/ASCII Art
    """
    parquet_path = os.path.join('output_default', 'preprocessed_super.parquet')
    json_path = 'features_main.json'
    if os.path.exists(parquet_path):
        print(f"[OK] ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå features: {parquet_path}")
        return parquet_path
    elif os.path.exists(json_path):
        print(f"[OK] ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå features: {json_path}")
        return json_path
    else:
        print("[‚úò] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå features ‡∏´‡∏•‡∏±‡∏Å (preprocessed_super.parquet ‡∏´‡∏£‡∏∑‡∏≠ features_main.json)")
        print("[üí°] ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Preprocess) ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå features_main.json ‡∏Å‡πà‡∏≠‡∏ô!")
        sys.exit(1)

def map_standard_columns(df: pd.DataFrame) -> pd.DataFrame:
    """Map/rename columns to standard names (‡πÄ‡∏ó‡∏û)"""
    col_map = {}
    for c in df.columns:
        cl = c.lower()
        if cl in ["open", "openprice", "open_price", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î"]:
            col_map[c] = "Open"
        elif cl in ["high", "highprice", "high_price", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"]:
            col_map[c] = "High"
        elif cl in ["low", "lowprice", "low_price", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"]:
            col_map[c] = "Low"
        elif cl in ["close", "closeprice", "close_price", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î"]:
            col_map[c] = "Close"
        elif cl in ["volume", "vol", "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì"]:
            col_map[c] = "Volume"
        else:
            col_map[c] = c
    df = df.rename(columns = col_map)
    # Remove duplicate lowercase columns if standard exists
    for col in ["close", "volume", "open", "high", "low"]:
        if col in df.columns and col.capitalize() in df.columns:
            df = df.drop(columns = [col])
    return df

def assert_no_lowercase_columns(df: pd.DataFrame):
    """Assert that no lowercase (open/high/low/close/volume) columns remain"""
    lowercase_cols = [c for c in df.columns if c in ["open", "high", "low", "close", "volume"]]
    assert not lowercase_cols, f"‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {lowercase_cols}"