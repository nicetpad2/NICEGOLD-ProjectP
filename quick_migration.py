#!/usr/bin/env python3
"""
Quick Migration Guide for ML Tracking System
р╕Др╕╣р╣Ир╕бр╕╖р╕нр╕Бр╕▓р╕гр╕вр╣Йр╕▓р╕вр╣Вр╕Ыр╕гр╣Ар╕Ир╣Зр╕Бр╕Хр╣Мр╣Бр╕ер╕░р╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╣Бр╕Ър╕Ър╕Зр╣Ир╕▓р╕в
"""

import os
import shutil
import zipfile
import subprocess
import json
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

class QuickMigrator:
    """р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕вр╣Йр╕▓р╕вр╣Вр╕Ыр╕гр╣Ар╕Ир╣Зр╕Бр╕Хр╣Мр╣Бр╕Ър╕Ър╕Зр╣Ир╕▓р╕в"""
    
    def __init__(self, project_path: str = "."):
        self.project_path = Path(project_path).resolve()
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    def create_export_package(self, output_name: str = None) -> str:
        """р╕кр╕гр╣Йр╕▓р╕З export package р╕кр╕│р╕лр╕гр╕▒р╕Ър╕вр╣Йр╕▓р╕вр╣Вр╕Ыр╕гр╣Ар╕Ир╣Зр╕Бр╕Хр╣М"""
        
        if output_name is None:
            output_name = f"ml_tracking_export_{self.timestamp}.zip"
        
        print("ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕кр╕гр╣Йр╕▓р╕З Export Package...")
        
        # р╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Др╕Яр╕ер╣Мр╣Бр╕ер╕░р╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г
        essential_items = [
            # Core tracking files
            "tracking.py",
            "tracking_config.yaml", 
            "tracking_cli.py",
            "tracking_integration.py",
            "tracking_examples.py",
            
            # Configuration files
            "requirements.txt",
            "tracking_requirements.txt",
            ".env.example",
            
            # Data and models
            "enterprise_tracking",
            "enterprise_mlruns", 
            "models",
            "artifacts",
            "data",
            
            # Project files
            "ProjectP.py",
            "config.yaml",
            "config",
            
            # Documentation
            "README_TRACKING.md",
            "SETUP_COMPLETE.md"
        ]
        
        with zipfile.ZipFile(output_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
            
            # Add migration info
            migration_info = {
                'created': datetime.now().isoformat(),
                'source_path': str(self.project_path),
                'platform': os.name,
                'included_items': [],
                'instructions': {
                    'setup': [
                        '1. р╣Бр╕Хр╕Б zip file р╣Гр╕Щр╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕Зр╣Гр╕лр╕бр╣И',
                        '2. р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З dependencies: pip install -r tracking_requirements.txt',
                        '3. Copy .env.example р╣Ар╕Ыр╣Зр╕Щ .env р╣Бр╕ер╕░р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓',
                        '4. р╕гр╕▒р╕Щ: python enterprise_setup_tracking.py',
                        '5. р╕Чр╕Фр╕кр╕нр╕Ъ: python tracking_examples.py'
                    ],
                    'validation': [
                        'р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ MLflow UI: mlflow ui --port 5000',
                        'р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ tracking: python tracking_cli.py status',
                        'р╕Чр╕Фр╕кр╕нр╕Ъ dashboard: streamlit run dashboard_app.py'
                    ]
                }
            }
            
            # Add each item to zip
            added_count = 0
            for item in essential_items:
                item_path = self.project_path / item
                
                if item_path.exists():
                    if item_path.is_file():
                        zipf.write(item_path, item)
                        migration_info['included_items'].append(f"ЁЯУД {item}")
                        added_count += 1
                        print(f"  тЬЕ р╣Ар╕Юр╕┤р╣Ир╕бр╣Др╕Яр╕ер╣М: {item}")
                    
                    elif item_path.is_dir():
                        for file_path in item_path.rglob('*'):
                            if file_path.is_file():
                                rel_path = file_path.relative_to(self.project_path)
                                zipf.write(file_path, rel_path)
                        migration_info['included_items'].append(f"ЁЯУБ {item}/")
                        added_count += 1
                        print(f"  тЬЕ р╣Ар╕Юр╕┤р╣Ир╕бр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М: {item}/")
                else:
                    print(f"  тЪая╕П р╣Др╕бр╣Ир╕Юр╕Ъ: {item}")
            
            # Add migration info to zip
            zipf.writestr('MIGRATION_INFO.json', json.dumps(migration_info, indent=2, ensure_ascii=False))
            
            # Create setup script for new environment
            setup_script = self._create_setup_script()
            zipf.writestr('setup_new_environment.py', setup_script)
            
            # Create quick start guide
            quick_guide = self._create_quick_guide()
            zipf.writestr('QUICK_START.md', quick_guide)
        
        print(f"тЬЕ Export Package р╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з: {output_name}")
        print(f"ЁЯУж р╕гр╕зр╕бр╣Др╕Яр╕ер╣М/р╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М: {added_count} р╕гр╕▓р╕вр╕Бр╕▓р╕г")
        print(f"ЁЯТ╛ р╕Вр╕Щр╕▓р╕Фр╣Др╕Яр╕ер╣М: {os.path.getsize(output_name) / (1024*1024):.1f} MB")
        
        return output_name
    
    def import_package(self, zip_file: str, target_path: str = None) -> bool:
        """Import package р╣Гр╕Щр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╣Гр╕лр╕бр╣И"""
        
        if target_path is None:
            target_path = f"imported_project_{self.timestamp}"
        
        target_path = Path(target_path).resolve()
        target_path.mkdir(exist_ok=True)
        
        print(f"ЁЯУе р╕Бр╕│р╕ер╕▒р╕З Import р╕Ир╕▓р╕Б: {zip_file}")
        print(f"ЁЯУБ р╣Др╕Ыр╕вр╕▒р╕З: {target_path}")
        
        try:
            with zipfile.ZipFile(zip_file, 'r') as zipf:
                zipf.extractall(target_path)
            
            print("тЬЕ р╣Бр╕Хр╕Бр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з")
            
            # Show next steps
            migration_info_path = target_path / 'MIGRATION_INFO.json'
            if migration_info_path.exists():
                with open(migration_info_path, 'r', encoding='utf-8') as f:
                    info = json.load(f)
                
                print("\\nЁЯУЛ р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Хр╣Ир╕нр╣Др╕Ы:")
                for i, step in enumerate(info['instructions']['setup'], 1):
                    print(f"  {i}. {step}")
                
                print("\\nЁЯФН р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ:")
                for i, check in enumerate(info['instructions']['validation'], 1):
                    print(f"  {i}. {check}")
            
            return True
            
        except Exception as e:
            print(f"тЭМ Import р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: {e}")
            return False
    
    def _create_setup_script(self) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Гр╕Щр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╣Гр╕лр╕бр╣И"""
        
        return '''#!/usr/bin/env python3
"""
Setup Script for New Environment
р╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕гр╕░р╕Ър╕Ър╣Гр╕Щр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╣Гр╕лр╕бр╣И
"""

import os
import sys
import subprocess
from pathlib import Path

def main():
    print("ЁЯЪА р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕гр╕░р╕Ър╕Ъ ML Tracking р╣Гр╕Щр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╣Гр╕лр╕бр╣И...")
    
    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Python version
    if sys.version_info < (3, 8):
        print("тЭМ р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г Python 3.8 р╕Вр╕╢р╣Йр╕Щр╣Др╕Ы")
        return False
    
    print(f"тЬЕ Python {sys.version}")
    
    # р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З dependencies
    print("ЁЯУж р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З dependencies...")
    
    requirements_files = [
        "tracking_requirements.txt",
        "requirements.txt"
    ]
    
    for req_file in requirements_files:
        if Path(req_file).exists():
            try:
                subprocess.run([sys.executable, "-m", "pip", "install", "-r", req_file], 
                              check=True)
                print(f"тЬЕ р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕Ир╕▓р╕Б {req_file} р╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з")
            except subprocess.CalledProcessError:
                print(f"тЪая╕П р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕Ир╕▓р╕Б {req_file} р╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓")
    
    # р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╕Чр╕╡р╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щ
    print("ЁЯУБ р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М...")
    folders = [
        "enterprise_tracking", "enterprise_mlruns", "models", 
        "artifacts", "logs", "data", "reports", "backups"
    ]
    
    for folder in folders:
        Path(folder).mkdir(exist_ok=True)
        print(f"  тЬЕ {folder}/")
    
    # р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ environment
    print("тЪЩя╕П р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ environment...")
    
    if Path(".env.example").exists() and not Path(".env").exists():
        import shutil
        shutil.copy(".env.example", ".env")
        print("  тЬЕ р╕кр╕гр╣Йр╕▓р╕З .env р╕Ир╕▓р╕Б .env.example")
        print("  тЪая╕П р╕Бр╕гр╕╕р╕Ур╕▓р╣Бр╕Бр╣Йр╣Др╕В .env р╕Хр╕▓р╕бр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕Вр╕нр╕Зр╕Др╕╕р╕У")
    
    # р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ
    print("ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ...")
    
    try:
        # Test MLflow import
        import mlflow
        print("  тЬЕ MLflow р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
        
        # Test tracking system
        if Path("tracking.py").exists():
            from tracking import ExperimentTracker
            tracker = ExperimentTracker()
            print("  тЬЕ Tracking system р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
        
    except ImportError as e:
        print(f"  тЪая╕П р╕Ыр╕▒р╕Нр╕лр╕▓р╕Бр╕▓р╕г import: {e}")
    
    print("\\nЁЯОЙ р╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!")
    print("\\nЁЯУЛ р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Хр╣Ир╕нр╣Др╕Ы:")
    print("1. р╣Бр╕Бр╣Йр╣Др╕Вр╣Др╕Яр╕ер╣М .env")
    print("2. р╕гр╕▒р╕Щ: python tracking_examples.py")
    print("3. р╣Ар╕Ыр╕┤р╕Ф MLflow UI: mlflow ui --port 5000")
    print("4. р╕Чр╕Фр╕кр╕нр╕Ъ CLI: python tracking_cli.py status")
    
    return True

if __name__ == "__main__":
    main()
'''
    
    def _create_quick_guide(self) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕╣р╣Ир╕бр╕╖р╕нр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕нр╕вр╣Ир╕▓р╕Зр╣Ар╕гр╣Зр╕з"""
        
        return '''# ЁЯЪА Quick Start Guide - ML Tracking System

## ЁЯУж р╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Гр╕лр╕бр╣И

### 1я╕ПтГг р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щ

```bash
# 1. р╣Бр╕Хр╕Б zip file р╣Бр╕ер╕░р╣Ар╕Вр╣Йр╕▓р╣Др╕Ыр╣Гр╕Щр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М
cd imported_project_folder

# 2. р╕гр╕▒р╕Щр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З
python setup_new_environment.py

# 3. р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ
python tracking_examples.py
```

### 2я╕ПтГг р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ Environment Variables

р╣Бр╕Бр╣Йр╣Др╕Вр╣Др╕Яр╕ер╣М `.env`:

```env
# MLflow
MLFLOW_TRACKING_URI=./enterprise_mlruns

# Weights & Biases (р╕Цр╣Йр╕▓р╣Гр╕Кр╣Й)
WANDB_API_KEY=your_api_key_here
WANDB_PROJECT=your_project_name

# Database (р╕Цр╣Йр╕▓р╣Гр╕Кр╣Й)
DATABASE_URL=your_database_url

# Monitoring
ENABLE_MONITORING=true
ALERT_EMAIL=your_email@domain.com
```

### 3я╕ПтГг р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ

```bash
# р╣Ар╕Ыр╕┤р╕Ф MLflow UI
mlflow ui --backend-store-uri ./enterprise_mlruns --port 5000

# р╕Чр╕Фр╕кр╕нр╕Ъ tracking
python -c "from tracking import ExperimentTracker; print('тЬЕ OK')"

# р╕Чр╕Фр╕кр╕нр╕Ъ CLI
python tracking_cli.py status

# р╣Ар╕гр╕┤р╣Ир╕б dashboard
streamlit run dashboard_app.py
```

## ЁЯФЧ р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Ър╕гр╕┤р╕Бр╕▓р╕г

- **MLflow UI**: http://localhost:5000
- **Dashboard**: http://localhost:8501
- **Monitoring**: http://localhost:8502

## ЁЯЖШ р╕лр╕▓р╕Бр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓

### р╕Ыр╕▒р╕Нр╕лр╕▓р╕Чр╕▒р╣Ир╕зр╣Др╕Ы:

1. **Import Error**: р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З dependencies р╣Гр╕лр╕бр╣И
   ```bash
   pip install -r tracking_requirements.txt
   ```

2. **Permission Error**: р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╣Др╕Яр╕ер╣М
   ```bash
   chmod -R 755 enterprise_tracking/
   ```

3. **MLflow Connection Error**: р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ tracking URI
   ```bash
   export MLFLOW_TRACKING_URI=./enterprise_mlruns
   ```

### р╕Бр╕▓р╕гр╕Вр╕нр╕Др╕зр╕▓р╕бр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н:

1. р╕Фр╕╣р╣Др╕Яр╕ер╣М `README_TRACKING.md` р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Др╕╣р╣Ир╕бр╕╖р╕нр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф
2. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ logs р╣Гр╕Щр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М `logs/`
3. р╕гр╕▒р╕Щ health check: `python tracking_cli.py health-check`

## ЁЯОп р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ

```python
from tracking import ExperimentTracker

# р╣Ар╕гр╕┤р╣Ир╕б experiment
tracker = ExperimentTracker()

with tracker.start_run("my_first_experiment") as run:
    # р╕Эр╕╢р╕Б model
    model = train_your_model()
    
    # Log metrics
    run.log_metric("accuracy", 0.95)
    
    # Log model
    run.log_model(model, "my_model")
```

## ЁЯПн Production Deployment

р╕кр╕│р╕лр╕гр╕▒р╕Ъ production:

1. р╣Гр╕Кр╣Й database backend р╣Бр╕Чр╕Щ file-based
2. р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ cloud storage р╕кр╕│р╕лр╕гр╕▒р╕Ъ artifacts
3. р╣Ар╕Ыр╕┤р╕Ф monitoring р╣Бр╕ер╕░ alerting
4. р╣Гр╕Кр╣Й Docker р╕лр╕гр╕╖р╕н Kubernetes

р╕Фр╕╣р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╣Гр╕Щ `README_TRACKING.md` section "Production Deployment"

---

**ЁЯОЙ р╕Вр╕нр╣Гр╕лр╣Йр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕нр╕вр╣Ир╕▓р╕Зр╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕В!**
'''

def main():
    """Main CLI interface"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Quick Migration Tool for ML Tracking System")
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Export command
    export_parser = subparsers.add_parser('export', help='Create export package')
    export_parser.add_argument('--output', '-o', help='Output file name')
    
    # Import command  
    import_parser = subparsers.add_parser('import', help='Import package')
    import_parser.add_argument('--input', '-i', required=True, help='Input zip file')
    import_parser.add_argument('--target', '-t', help='Target directory')
    
    args = parser.parse_args()
    
    migrator = QuickMigrator()
    
    if args.command == 'export':
        output_file = migrator.create_export_package(args.output)
        print(f"\\nЁЯУЛ р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Хр╣Ир╕нр╣Др╕Ы:")
        print(f"1. р╕кр╣Ир╕З {output_file} р╣Др╕Ыр╕вр╕▒р╕Зр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╣Гр╕лр╕бр╣И")
        print(f"2. р╕гр╕▒р╕Щ: python quick_migration.py import -i {output_file}")
        
    elif args.command == 'import':
        success = migrator.import_package(args.input, args.target)
        if success:
            print("\\nтЬЕ Import р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!")
            print("ЁЯУЛ р╕гр╕▒р╕Щр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З: python setup_new_environment.py")
        else:
            print("\\nтЭМ Import р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з")
    
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
