from colorama import Fore, Style, init as colorama_init
            from real_data_loader import load_real_trading_data
            from sklearn.ensemble import RandomForestClassifier
            from sklearn.metrics import accuracy_score, classification_report
            from sklearn.model_selection import train_test_split
        import json
import os
        import pandas as pd
import sys
        import traceback
"""
Quick Test - ProjectP with Real Data
 =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  = 

‡∏ó‡∏î‡∏™‡∏≠‡∏ö ProjectP ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
"""

colorama_init(autoreset = True)

def test_projectp_real_data():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö ProjectP ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""

    print(f"{Fore.CYAN}{' = '*60}")
    print(f"{Fore.CYAN}üß™ TESTING ProjectP WITH REAL DATA")
    print(f"{Fore.CYAN}{' = '*60}")

    try:
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        print(f"{Fore.GREEN}Step 1: Checking real data availability...{Style.RESET_ALL}")

        data_files = [
            "output_default/real_trading_data.csv", 
            "output_default/features.csv", 
            "output_default/targets.csv"
        ]

        data_ready = all(os.path.exists(f) for f in data_files)

        if not data_ready:
            print(f"{Fore.YELLOW}üìä Real data not ready, preparing...{Style.RESET_ALL}")

            df, info = load_real_trading_data(
                timeframe = "M15", 
                max_rows = 3000,  # ‡πÉ‡∏ä‡πâ 3k ‡πÅ‡∏ñ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡πá‡∏ß
                profit_threshold = 0.12
            )

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            os.makedirs("output_default", exist_ok = True)
            df.to_csv("output_default/real_trading_data.csv", index = False)

            feature_cols = [col for col in df.columns if col not in
                           ['Time', 'target', 'target_binary', 'target_return']]

            df[feature_cols].to_csv("output_default/features.csv", index = False)
            df[['target', 'target_binary', 'target_return']].to_csv("output_default/targets.csv", index = False)

            print(f"{Fore.GREEN}‚úÖ Real data prepared: {len(df):, } samples{Style.RESET_ALL}")
        else:
            print(f"{Fore.GREEN}‚úÖ Real data already available{Style.RESET_ALL}")

        # 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        print(f"{Fore.GREEN}Step 2: Testing real data loading...{Style.RESET_ALL}")

        features_df = pd.read_csv("output_default/features.csv")
        targets_df = pd.read_csv("output_default/targets.csv")

        print(f"üìä Features: {features_df.shape}")
        print(f"üìä Targets: {targets_df.shape}")
        print(f"üìä Feature columns: {list(features_df.columns)[:5]}...")
        print(f"üìä Target columns: {list(targets_df.columns)}")

        # 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        print(f"{Fore.GREEN}Step 3: Testing basic pipeline functions...{Style.RESET_ALL}")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
        def test_simple_ml_pipeline():
            """‡∏ó‡∏î‡∏™‡∏≠‡∏ö ML pipeline ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""

            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            X = features_df.select_dtypes(include = ['int64', 'float64'])
            y = targets_df['target']

            # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• train/test
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size = 0.2, random_state = 42, stratify = y
            )

            print(f"üîß Training data: {X_train.shape}")
            print(f"üîß Test data: {X_test.shape}")

            # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
            model = RandomForestClassifier(n_estimators = 50, random_state = 42, n_jobs = -1)
            model.fit(X_train, y_train)

            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            y_pred = model.predict(X_test)
            accuracy = accuracy_score(y_test, y_pred)

            print(f"üìà Model Accuracy: {accuracy:.3f}")
            print(f"üìä Classification Report:")
            print(classification_report(y_test, y_pred))

            return accuracy > 0.3  # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥

        # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        ml_success = test_simple_ml_pipeline()

        if ml_success:
            print(f"{Fore.GREEN}‚úÖ ML pipeline test successful!{Style.RESET_ALL}")
        else:
            print(f"{Fore.YELLOW}‚ö†Ô∏è ML pipeline test had issues but continuing...{Style.RESET_ALL}")

        # 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        print(f"{Fore.GREEN}Step 4: Generating test report...{Style.RESET_ALL}")

        report = {
            'test_date': '2025 - 06 - 23', 
            'data_source': 'Real XAUUSD Market Data', 
            'samples': len(features_df), 
            'features': len(features_df.columns), 
            'targets': len(targets_df.columns), 
            'ml_test_passed': ml_success, 
            'status': 'SUCCESS' if ml_success else 'WARNING'
        }

        with open("output_default/test_report.json", "w") as f:
            json.dump(report, f, indent = 2)

        # 5. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        print(f"\n{Fore.CYAN}{' = '*60}")
        print(f"{Fore.CYAN}üìä TEST SUMMARY")
        print(f"{Fore.CYAN}{' = '*60}")

        print(f"{Fore.GREEN}‚úÖ Data Source: Real XAUUSD Market Data")
        print(f"{Fore.GREEN}‚úÖ Samples: {len(features_df):, }")
        print(f"{Fore.GREEN}‚úÖ Features: {len(features_df.columns)}")
        print(f"{Fore.GREEN}‚úÖ ML Pipeline: {'PASSED' if ml_success else 'WARNING'}")

        if ml_success:
            print(f"\n{Fore.GREEN}üéâ ProjectP READY FOR REAL DATA TRADING!{Style.RESET_ALL}")
            print(f"{Fore.CYAN}‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô: python ProjectP.py - - run_full_pipeline{Style.RESET_ALL}")
        else:
            print(f"\n{Fore.YELLOW}‚ö†Ô∏è ProjectP needs adjustment but basic functions work{Style.RESET_ALL}")

        return True

    except Exception as e:
        print(f"{Fore.RED}‚ùå Test failed: {e}{Style.RESET_ALL}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print(f"{Fore.CYAN}üöÄ Starting ProjectP Real Data Test{Style.RESET_ALL}")

    success = test_projectp_real_data()

    if success:
        print(f"\n{Fore.GREEN}üéØ NEXT STEPS:{Style.RESET_ALL}")
        print(f"1. ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß!")
        print(f"2. ‡∏£‡∏±‡∏ô: python ProjectP.py - - run_full_pipeline")
        print(f"3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    else:
        print(f"\n{Fore.RED}‚ùå Test failed. ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô{Style.RESET_ALL}")