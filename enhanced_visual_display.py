#!/usr/bin/env python3
from datetime import datetime, timedelta
from rich.align import Align
from rich.box import ROUNDED
from rich.columns import Columns
from rich.console import Console
from rich.layout import Layout
from rich.live import Live
from rich.panel import Panel
from rich.progress import (
from rich.table import Table
from rich.text import Text
from typing import Any, Dict, List, Optional
import json
import os
import time
"""
üé® ENHANCED VISUAL DISPLAY SYSTEM
‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NICEGOLD Pipeline
"""


    BarColumn, 
    MofNCompleteColumn, 
    Progress, 
    SpinnerColumn, 
    TaskProgressColumn, 
    TextColumn, 
    TimeElapsedColumn, 
    TimeRemainingColumn, 
)

console = Console()


class ThaiVisualDisplay:
    """‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°"""

    def __init__(self):
        self.console = Console()
        self.pipeline_start_time = None
        self.current_stage = None
        self.stage_metrics = {}

    def show_welcome_screen(
        self, title: str = "üèÜ NICEGOLD ProjectP - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"
    ):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°"""
        self.console.clear()
        self.show_pipeline_banner(title)

    def show_pipeline_banner(self, title: str):
        """‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Pipeline"""
        banner_text = Text(title, style = "bold gold1")
        subtitle = Text("üöÄ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢", style = "italic blue")

        banner = Panel(
            Align.center(
                Text.assemble(
                    banner_text, 
                    "\n\n", 
                    subtitle, 
                    "\n", 
                    Text("‚≠ê ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ ‚≠ê", style = "green"), 
                )
            ), 
            box = ROUNDED, 
            style = "gold1", 
            padding = (1, 2), 
        )

        self.console.print(banner)
        self.console.print()

    def create_progress_tracker(self) -> Progress:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Progress Tracker ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°"""
        return Progress(
            SpinnerColumn(), 
            TextColumn("[progress.description]{task.description}"), 
            BarColumn(), 
            MofNCompleteColumn(), 
            TextColumn("‚Ä¢"), 
            TimeElapsedColumn(), 
            TextColumn("‚Ä¢"), 
            TimeRemainingColumn(), 
            console = self.console, 
        )

    def update_stage_status(self, stage: str, status: str, details: str = ""):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô"""
        self.current_stage = stage

        status_colors = {
            "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô": "yellow", 
            "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£": "blue", 
            "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à": "green", 
            "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î": "red", 
            "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£": "white", 
        }

        color = status_colors.get(status, "white")

        status_panel = Panel(
            Text.assemble(
                Text(f"üìä ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: {stage}", style = "bold"), 
                "\n", 
                Text(f"üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status}", style = f"bold {color}"), 
                "\n" + details if details else "", 
            ), 
            title = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", 
            box = ROUNDED, 
            style = color, 
        )

        self.console.print(status_panel)

    def show_stage_summary(self, stage_results: Dict[str, Any]):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô"""

        summary_table = Table(title = "üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô", show_header = True)
        summary_table.add_column("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô", style = "cyan")
        summary_table.add_column("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", style = "green")
        summary_table.add_column("‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)", style = "yellow")
        summary_table.add_column("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", style = "white")

        for stage, result in stage_results.items():
            status = "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if result.get("success", True) else "‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
            duration = f"{result.get('duration', 0):.2f}"
            details = result.get("details", " - ")

            summary_table.add_row(stage, status, duration, details)

        panel = Panel(summary_table, box = ROUNDED, style = "blue")
        self.console.print(panel)

    def show_final_results(self, results: Dict[str, Any]):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"""

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å
        results_table = Table(title = "üéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢", show_header = True)
        results_table.add_column("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", style = "cyan")
        results_table.add_column("‡∏Ñ‡πà‡∏≤", style = "green")
        results_table.add_column("‡∏´‡∏ô‡πà‡∏ß‡∏¢", style = "yellow")

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if "model_performance" in results:
            perf = results["model_performance"]
            results_table.add_row("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥", f"{perf.get('accuracy', 0):.3f}", "%")
            results_table.add_row("‡∏Ñ‡πà‡∏≤ AUC", f"{perf.get('auc', 0):.3f}", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")

        if "execution_time" in results:
            results_table.add_row(
                "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{results['execution_time']:.2f}", "‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
            )

        if "data_processed" in results:
            results_table.add_row(
                "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•", f"{results['data_processed']:, }", "‡πÅ‡∏ñ‡∏ß"
            )

        final_panel = Panel(
            Align.center(results_table), 
            title = "üèÜ NICEGOLD Pipeline - ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå", 
            box = ROUNDED, 
            style = "gold1", 
            padding = (1, 2), 
        )

        self.console.print(final_panel)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        success_message = Text.assemble(
            Text("üéâ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå! ", style = "bold green"), 
            Text("‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô üöÄ", style = "bold blue"), 
        )

        self.console.print(Align.center(success_message))

    def show_system_status(
        self, cpu_percent = 0, ram_percent = 0, gpu_available = False, gpu_usage = 0
    ):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
        status_table = Table(title = "üñ•Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö", show_header = True)
        status_table.add_column("‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£", style = "cyan")
        status_table.add_column("‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", style = "yellow")
        status_table.add_column("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", style = "green")

        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ CPU
        cpu_status = (
            "üü¢ ‡∏õ‡∏Å‡∏ï‡∏¥" if cpu_percent < 70 else "üü° ‡∏£‡∏∞‡∏ß‡∏±‡∏á" if cpu_percent < 90 else "üî¥ ‡∏™‡∏π‡∏á"
        )
        status_table.add_row("CPU", f"{cpu_percent:.1f}%", cpu_status)

        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ RAM
        ram_status = (
            "üü¢ ‡∏õ‡∏Å‡∏ï‡∏¥" if ram_percent < 70 else "üü° ‡∏£‡∏∞‡∏ß‡∏±‡∏á" if ram_percent < 90 else "üî¥ ‡∏™‡∏π‡∏á"
        )
        status_table.add_row("RAM", f"{ram_percent:.1f}%", ram_status)

        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ GPU
        if gpu_available:
            gpu_status = (
                "üü¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°"
                if gpu_usage < 70
                else "üü° ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" if gpu_usage < 90 else "üî¥ ‡πÄ‡∏ï‡πá‡∏°"
            )
            status_table.add_row("GPU", f"{gpu_usage:.1f}%", gpu_status)
        else:
            status_table.add_row("GPU", "‡πÑ‡∏°‡πà‡∏°‡∏µ", "‚ûñ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

        # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö
        system_panel = Panel(
            status_table, 
            title = "üìä ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö", 
            box = ROUNDED, 
            style = "blue", 
            padding = (1, 2), 
        )

        self.console.print(system_panel)


class EnhancedReportGenerator:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""

    def __init__(self, output_dir: str = "output"):
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok = True)

    def generate_performance_report(self, metrics: Dict[str, Any]) -> Dict[str, Any]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        report = {
            "timestamp": datetime.now().isoformat(), 
            "report_type": "performance_analysis", 
            "metrics": metrics, 
            "execution_summary": {
                "total_execution_time": metrics.get("total_time", 0), 
                "successful_stages": metrics.get("successful_stages", 0), 
                "total_stages": metrics.get("total_stages", 0), 
                "success_rate": (
                    metrics.get("successful_stages", 0)
                    / max(metrics.get("total_stages", 1), 1)
                )
                * 100, 
                "status": (
                    "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if metrics.get("all_successful", True) else "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
                ), 
            }, 
            "stage_breakdown": metrics.get("stage_times", {}), 
            "resource_usage": metrics.get("resource_usage", {}), 
            "recommendations": self._generate_performance_recommendations(metrics), 
        }

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        report_path = os.path.join(self.output_dir, "performance_report.json")
        with open(report_path, "w", encoding = "utf - 8") as f:
            json.dump(report, f, ensure_ascii = False, indent = 2)

        return report

    def generate_data_quality_report(
        self, data_metrics: Dict[str, Any]
    ) -> Dict[str, Any]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""

        data_health_score = self._calculate_data_health_score(data_metrics)

        report = {
            "timestamp": datetime.now().isoformat(), 
            "report_type": "data_quality_analysis", 
            "data_health_score": data_health_score, 
            "metrics": data_metrics, 
            "quality_indicators": {
                "completeness": data_metrics.get("completeness_score", 100), 
                "consistency": data_metrics.get("consistency_score", 100), 
                "accuracy": data_metrics.get("accuracy_score", 100), 
                "freshness": data_metrics.get("freshness_score", 100), 
            }, 
            "data_issues": data_metrics.get("issues", []), 
            "recommendations": self._generate_data_recommendations(data_metrics), 
        }

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        report_path = os.path.join(self.output_dir, "data_quality_report.json")
        with open(report_path, "w", encoding = "utf - 8") as f:
            json.dump(report, f, ensure_ascii = False, indent = 2)

        return report

    def generate_html_dashboard(self, all_reports: Dict[str, Any]) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard HTML ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°"""

        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template
        performance_data = all_reports.get("performance", {})
        data_quality_data = all_reports.get("data_quality", {})
        execution_summary = performance_data.get("execution_summary", {})

        # Extract data for the HTML
        success_rate = execution_summary.get("success_rate", 100)
        execution_time = execution_summary.get("total_execution_time", 0)
        data_health_score = data_quality_data.get("data_health_score", 95)
        status = execution_summary.get("status", "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        successful_stages = execution_summary.get("successful_stages", "N/A")
        total_stages = execution_summary.get("total_stages", "N/A")

        html_content = f"""
<!DOCTYPE html>
<html lang = "th">
<head>
    <meta charset = "UTF - 8">
    <meta name = "viewport" content = "width = device - width, initial - scale = 1.0">
    <title>üèÜ NICEGOLD Pipeline Dashboard</title>
    <style>
        body {{ font - family: Arial, sans - serif; margin: 20px; background: #f0f8ff; }}
        .container {{ max - width: 1000px; margin: 0 auto; background: white; padding: 30px; border - radius: 10px; }}
        .header {{ text - align: center; color: #2c3e50; margin - bottom: 30px; }}
        .stats {{ display: grid; grid - template - columns: repeat(auto - fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }}
        .stat - card {{ background: #f8f9fa; padding: 20px; border - radius: 8px; text - align: center; border - left: 4px solid #FFD700; }}
        .stat - value {{ font - size: 2em; font - weight: bold; color: #27ae60; }}
        .section {{ margin: 30px 0; padding: 20px; background: #f8f9fa; border - radius: 8px; }}
        .recommendations {{ background: #e8f5e8; padding: 15px; border - radius: 8px; margin: 10px 0; }}
    </style>
</head>
<body>
    <div class = "container">
        <div class = "header">
            <h1>üèÜ NICEGOLD Pipeline Dashboard</h1>
            <p>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô - {datetime.now().strftime('%Y - %m - %d %H:%M:%S')}</p>
        </div>

        <div class = "stats">
            <div class = "stat - card">
                <div class = "stat - value">{success_rate:.1f}%</div>
                <div>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</div>
            </div>
            <div class = "stat - card">
                <div class = "stat - value">{execution_time:.1f}s</div>
                <div>‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</div>
            </div>
            <div class = "stat - card">
                <div class = "stat - value">{data_health_score:.1f}%</div>
                <div>‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
            </div>
        </div>

        <div class = "section">
            <h2>üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô</h2>
            <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> {status}</p>
            <p><strong>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</strong> {successful_stages}</p>
            <p><strong>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong> {total_stages}</p>
        </div>

        <div class = "section">
            <h2>üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á</h2>
            <div class = "recommendations">
                <p>‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</p>
            </div>
        </div>

        <div class = "section">
            <h2>üéØ ‡∏™‡∏£‡∏∏‡∏õ</h2>
            <p>‡∏£‡∏∞‡∏ö‡∏ö NICEGOLD Pipeline ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞</p>
        </div>

        <div style = "text - align: center; margin - top: 30px; color: #7f8c8d;">
            <p>üöÄ NICEGOLD ProjectP - Enhanced AI Trading System</p>
        </div>
    </div>
</body>
</html>
        """

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå HTML
        html_path = os.path.join(self.output_dir, "pipeline_dashboard.html")
        with open(html_path, "w", encoding = "utf - 8") as f:
            f.write(html_content)

        return html_path

    def _generate_performance_recommendations(
        self, metrics: Dict[str, Any]
    ) -> List[str]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        recommendations = []

        if metrics.get("total_time", 0) > 300:  # ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            recommendations.append("‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")

        if metrics.get("memory_usage", 0) > 80:  # ‡πÉ‡∏ä‡πâ memory ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 80%
            recommendations.append("‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° RAM ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥")

        if not metrics.get("all_successful", True):
            recommendations.append("‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤")

        if not recommendations:
            recommendations.append("‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")

        return recommendations

    def _generate_data_recommendations(self, metrics: Dict[str, Any]) -> List[str]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        recommendations = []

        completeness = metrics.get("completeness_score", 100)
        if completeness < 90:
            recommendations.append("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ï‡πà‡∏≥ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        missing_values = metrics.get("missing_values", 0)
        if missing_values > 0.1:  # ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10%
            recommendations.append("‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô 10% ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        if not recommendations:
            recommendations.append("‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ")

        return recommendations

    def _calculate_data_health_score(self, metrics: Dict[str, Any]) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""

        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        base_score = 100.0

        # ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å missing values
        missing_ratio = metrics.get("missing_values", 0)
        missing_penalty = missing_ratio * 50  # ‡∏´‡∏±‡∏Å 50 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠ 100% missing

        # ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å outliers
        outlier_ratio = metrics.get("outliers", 0)
        outlier_penalty = outlier_ratio * 100 * 0.5

        score = base_score - missing_penalty - outlier_penalty

        return max(0, min(100, score))


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
def create_enhanced_display() -> ThaiVisualDisplay:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
    return ThaiVisualDisplay()


def create_report_generator(
    output_dir: str = "output_default", 
) -> EnhancedReportGenerator:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"""
    return EnhancedReportGenerator(output_dir)