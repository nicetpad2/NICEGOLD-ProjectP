#!/usr/bin/env python3
"""
üîß SIMPLE IMPORT TEST
‡∏ó‡∏î‡∏™‡∏≠‡∏ö imports ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤
"""

import sys
import os
import time

def test_basic_imports():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö imports ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    print("üß™ Testing basic imports...")
    
    try:
        import pandas as pd
        print("‚úÖ pandas imported")
    except Exception as e:
        print(f"‚ùå pandas failed: {e}")
    
    try:
        import numpy as np
        print("‚úÖ numpy imported")
    except Exception as e:
        print(f"‚ùå numpy failed: {e}")
    
    try:
        from pathlib import Path
        print("‚úÖ pathlib imported")
    except Exception as e:
        print(f"‚ùå pathlib failed: {e}")

def test_project_imports():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö project imports"""
    print("\nüß™ Testing project imports...")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö integrated_emergency_fixes
        from integrated_emergency_fixes import create_emergency_fix_manager
        print("‚úÖ integrated_emergency_fixes imported")
    except Exception as e:
        print(f"‚ùå integrated_emergency_fixes failed: {e}")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö projectp.pipeline
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from projectp.pipeline import run_full_pipeline
        print("‚úÖ projectp.pipeline imported")
    except Exception as e:
        print(f"‚ùå projectp.pipeline failed: {e}")

def test_quick_projectp():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö ProjectP ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß"""
    print("\nüß™ Testing ProjectP quick imports...")
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout
    start_time = time.time()
    timeout = 10  # 10 seconds
    
    try:
        # Test if we can import basic ProjectP components
        import warnings
        warnings.filterwarnings('ignore')
        
        from colorama import Fore, Style, init as colorama_init
        colorama_init(autoreset=True)
        print("‚úÖ colorama imported")
        
        # Test argument parser creation (without running)
        import argparse
        parser = argparse.ArgumentParser(description="Test")
        print("‚úÖ argparse ready")
        
        if time.time() - start_time > timeout:
            print(f"‚è∞ Timeout reached ({timeout}s)")
            return False
        
        print("‚úÖ Quick ProjectP test passed")
        return True
        
    except Exception as e:
        print(f"‚ùå Quick ProjectP test failed: {e}")
        return False

def main():
    """Main test function"""
    print("üîß SIMPLE IMPORT TEST STARTING...")
    print("=" * 50)
    
    test_basic_imports()
    test_project_imports() 
    result = test_quick_projectp()
    
    print("\n" + "=" * 50)
    if result:
        print("‚úÖ IMPORT TESTS COMPLETED")
    else:
        print("‚ùå SOME IMPORT TESTS FAILED")
    print("=" * 50)

if __name__ == "__main__":
    main()
