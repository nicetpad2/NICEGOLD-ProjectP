#!/usr/bin/env python3
"""
Script to fix all Unicode/Thai comments in config.py for production compatibility
"""

import os
import re


def fix_unicode_comments():
    """Replace all Thai/Unicode comments with ASCII equivalents"""

    config_file = "src/config.py"

    if not os.path.exists(config_file):
        print(f"File {config_file} not found!")
        return

    # Read the file
    with open(config_file, "r", encoding = "utf - 8") as f:
        content = f.read()

    # Define replacement patterns
    replacements = [
        # Thai comments to ASCII
        (r"# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Logging", "# Basic logging configuration"), 
        (
            r"# ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå log ‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞ fold", 
            "# Store log files in subdirectories by date and fold", 
        ), 
        (
            r"# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger ‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô", 
            "# Setup central logger for shared module usage", 
        ), 
        (
            r"# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î COMPACT_LOG ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠", 
            "# Support COMPACT_LOG mode to reduce screen output", 
        ), 
        (
            r"# ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ logger ‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô", 
            "# Confirm function uses logger variable imported above", 
        ), 
        (
            r'logging\.info\("   ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ ([^"] + )\.\.\."\)', 
            r'logging.info("   Installing \1 library...")', 
        ), 
        (
            r'logging\.info\("   \(Success\) ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ([^"] + ) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\."\)', 
            r'logging.info("   (Success) \1 installed successfully.")', 
        ), 
        (
            r'logging\.error\(f"   \(Error\) ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ([^"] + ): \{([^}] + )\}', 
            r'logging.error(f"   (Error) Cannot install \1: {\2}', 
        ), 
        (
            r'logging\.warning\("‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ \'([^\'] + )\' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡πÅ‡∏•‡∏∞ AUTO_INSTALL_LIBS = False', 
            r'logging.warning("Library \'\1\' not installed and AUTO_INSTALL_LIBS = False', 
        ), 
        (
            r'"   \(Info\) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô ([^"] + ): "', 
            r'"   (Info) Checking \1 version: "', 
        ), 
        (
            r'"   \(Info\) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô GPU ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ([^"] + ): "', 
            r'"   (Info) Checking GPU count for \1: "', 
        ), 
        (
            r'"   \(Warning\) ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô GPU ‡∏Ç‡∏≠‡∏á ([^"] + ): "', 
            r'"   (Warning) Cannot check GPU count for \1: "', 
        ), 
        (r'"   ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ([^"] + ): \.\.\."', r'"   \1 installation result: ..."'), 
        (
            r'"\(Info\) ‡∏£‡∏±‡∏ô‡∏ö‡∏ô Google Colab ‚Äì ‡∏Å‡∏≥‡∏•‡∏±‡∏á mount Google Drive\.\.\."', 
            '"(Info) Running on Google Colab - mounting Google Drive..."', 
        ), 
        (
            r'"\(Success\) Mount Google Drive ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"', 
            '"(Success) Google Drive mounted successfully"', 
        ), 
        (
            r'"\(Info\) ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Colab ‚Äì ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö log ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"', 
            '"(Info) Not Colab - using local paths for logs and data storage"', 
        ), 
        (
            r"# ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Google Drive ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Colab", 
            "# Use Google Drive folder if available even outside Colab", 
        ), 
        (
            r"# ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà", 
            "# Use current folder as base to work everywhere", 
        ), 
        (
            r'"   ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á SHAP ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà\.\.\."', 
            '"   SHAP installation may take a while..."', 
        ), 
        (
            r'"   ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á GPUtil ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GPU \(Optional\)\.\.\."', 
            '"   Installing GPUtil for GPU monitoring (Optional)..."', 
        ), 
        (
            r'"   \(Warning\) ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á GPUtil: ([^"] + )\. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô show_system_status ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\."', 
            r'"   (Warning) Cannot install GPUtil: \1. show_system_status function may not work."', 
        ), 
        (
            r'"‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ \'GPUtil\' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ"', 
            "\"Library 'GPUtil' not installed or cannot be loaded\"", 
        ), 
        # Specific logging messages
        (
            r'logger\.info\(" -  - - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dependencies - -  - "\)', 
            'logger.info(" -  - - Loading libraries and checking dependencies - -  - ")', 
        ), 
        (
            r"# minimum rows required for trade log validation", 
            "# minimum rows required for trade log validation", 
        ), 
        # Remove any remaining emoji/special Unicode characters in logging
        (r"üîç", "[CHECK]"), 
        (r"‚úÖ", "[OK]"), 
        (r"‚ö†Ô∏è", "[WARNING]"), 
        (r"üíª", "[SYSTEM]"), 
        (r"üéØ", "[TARGET]"), 
        (r"üì¶", "[PACKAGE]"), 
        (r"üìä", "[DATA]"), 
        (r"üöÄ", "[LAUNCH]"), 
        (r"‚ÑπÔ∏è", "[INFO]"), 
        (r"‚ùå", "[ERROR]"), 
        (r"üí°", "[IDEA]"), 
        (r"üîß", "[TOOL]"), 
        (r"üìà", "[CHART]"), 
        (r"üìâ", "[TREND]"), 
        (r"‚≠ê", "[STAR]"), 
        (r"üéâ", "[SUCCESS]"), 
        (r"üî•", "[HOT]"), 
        (r"‚ö°", "[FAST]"), 
        (r"üåü", "[HIGHLIGHT]"), 
        (r"üíé", "[PREMIUM]"), 
        (r"üèÜ", "[WINNER]"), 
        (r"üé®", "[DESIGN]"), 
        (r"üîí", "[SECURE]"), 
    ]

    # Apply all replacements
    for pattern, replacement in replacements:
        content = re.sub(pattern, replacement, content, flags = re.MULTILINE)

    # Additional cleanup - remove any remaining non - ASCII characters in log messages
    # This is a more aggressive approach for any remaining Unicode in strings
    lines = content.split("\n")
    cleaned_lines = []

    for line in lines:
        # If line contains logging and has non - ASCII characters, try to clean it
        if any(keyword in line for keyword in ["logger.", "logging."]) and any(
            ord(char) > 127 for char in line
        ):
            # Replace any remaining Thai characters with [THAI] placeholder
            line = re.sub(r"[‡∏Å - ‡πô] + ", "[THAI]", line)
            # Replace any other high Unicode with [UNICODE]
            line = re.sub(r"[^\x00 - \x7F] + ", "[UNICODE]", line)
        cleaned_lines.append(line)

    content = "\n".join(cleaned_lines)

    # Write back to file
    with open(config_file, "w", encoding = "utf - 8") as f:
        f.write(content)

    print(f"‚úì Fixed Unicode comments in {config_file}")
    print(
        "All Unicode/emoji characters in logging messages have been replaced with ASCII equivalents"
    )


if __name__ == "__main__":
    fix_unicode_comments()