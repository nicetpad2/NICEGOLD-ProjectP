#!/usr/bin/env python3
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
import os
import pandas as pd
import sys
"""
üéØ Quick Pipeline Test - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  = 
"""


console = Console()

def test_data_readiness():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    console.print(Panel("üîç [bold blue]‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Multi - timeframe[/bold blue]", 
                        border_style = "cyan"))

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    data_file = "output_default/real_data.csv"
    if not os.path.exists(data_file):
        console.print("[red]‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• real_data.csv[/red]")
        return False

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    try:
        df = pd.read_csv(data_file)
        console.print(f"[green]‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {df.shape}[/green]")

        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        table = Table(title = "üìä Data Summary", show_header = True, header_style = "bold magenta")
        table.add_column("Metric", style = "cyan")
        table.add_column("Value", style = "white")
        table.add_row("Total Rows", f"{len(df):, }")
        table.add_row("Total Columns", f"{len(df.columns)}")
        table.add_row("Memory Usage", f"{df.memory_usage(deep = True).sum() / 1024**2:.1f} MB")

        # Target distribution
        if 'target' in df.columns:
            target_dist = df['target'].value_counts().sort_index()
            for i, count in target_dist.items():
                table.add_row(f"Target {i}", f"{count:, } ({count/len(df)*100:.1f}%)")

        console.print(table)
        return True

    except Exception as e:
        console.print(f"[red]‚ùå Error loading data: {e}[/red]")
        return False

def test_pipeline_modules():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏• Pipeline"""
    console.print(Panel("üîß [bold blue]‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡∏î‡∏π‡∏• Pipeline[/bold blue]", border_style = "green"))

    modules_to_test = [
        ("projectp.steps.train", "run_train"), 
        ("projectp.steps.sweep", "run_sweep"), 
        ("projectp.steps.threshold", "run_threshold"), 
        ("projectp.steps.walkforward", "run_walkforward"), 
        ("projectp.steps.backtest", "run_backtest"), 
        ("projectp.steps.report", "run_report"), 
    ]

    results = []
    for module_name, func_name in modules_to_test:
        try:
            module = __import__(module_name, fromlist = [func_name])
            func = getattr(module, func_name)
            results.append((module_name, "‚úÖ", "Ready"))
        except Exception as e:
            results.append((module_name, "‚ùå", str(e)[:50]))

    table = Table(title = "üîß Pipeline Modules Status", show_header = True, header_style = "bold green")
    table.add_column("Module", style = "cyan")
    table.add_column("Status", style = "white")
    table.add_column("Details", style = "yellow")

    for module, status, details in results:
        table.add_row(module.split('.')[ - 1], status, details)

    console.print(table)

    # Count ready modules
    ready_count = sum(1 for _, status, _ in results if status == "‚úÖ")
    total_count = len(results)

    if ready_count == total_count:
        console.print(f"[green]üéâ ‡∏ó‡∏∏‡∏Å‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ({ready_count}/{total_count})[/green]")
        return True
    else:
        console.print(f"[yellow]‚ö†Ô∏è ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {ready_count}/{total_count}[/yellow]")
        return False

def test_output_directories():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏û‡∏∏‡∏ï"""
    console.print(Panel("üìÅ [bold blue]‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå[/bold blue]", border_style = "yellow"))

    required_dirs = [
        "output_default", 
        "output_default/models", 
        "output_default/logs", 
        "output_default/reports", 
        "logs"
    ]

    for dir_path in required_dirs:
        Path(dir_path).mkdir(parents = True, exist_ok = True)
        if os.path.exists(dir_path):
            console.print(f"[green]‚úÖ {dir_path}[/green]")
        else:
            console.print(f"[red]‚ùå {dir_path}[/red]")

    return True

def show_next_steps():
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
    console.print(Panel("""
üöÄ [bold green]‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô! ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:[/bold green]

1. [cyan]python ProjectP.py - - run_full_pipeline[/cyan]
   ‡∏£‡∏±‡∏ô‡πÑ‡∏õ‡∏õ‡πå‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏° (All steps)

2. [cyan]python ProjectP.py - - debug_full_pipeline[/cyan]
   ‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Debug ‡∏û‡∏£‡πâ‡∏≠‡∏° Logging ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î

3. [cyan]‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:[/cyan]
   ‚Ä¢ Train: ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• ML
   ‚Ä¢ Sweep: ‡∏´‡∏≤ Hyperparameters ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
   ‚Ä¢ Threshold: ‡∏´‡∏≤ Threshold ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
   ‚Ä¢ WalkForward: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Walk - Forward
   ‚Ä¢ Backtest: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
   ‚Ä¢ Report: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô

4. [yellow]‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å:[/yellow]
   üìÅ output_default/real_data.csv (22, 474 samples, 56 features)

[bold blue]üî• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Multi - timeframe ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö Production![/bold blue]
    """, title = "[bold magenta]üéØ Next Steps", border_style = "bright_green"))

def main():
    """‡πÄ‡∏°‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    console.print(Panel("""
üéØ [bold blue]Quick Pipeline Test[/bold blue]
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Multi - timeframe
    """, title = "[bold green]Pipeline Readiness Check", border_style = "blue"))

    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    data_ready = test_data_readiness()
    modules_ready = test_pipeline_modules()
    dirs_ready = test_output_directories()

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    console.print("\n" + " = "*60)
    if data_ready and modules_ready and dirs_ready:
        console.print("[bold green]üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô![/bold green]")
        show_next_steps()
    else:
        console.print("[bold yellow]‚ö†Ô∏è ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô[/bold yellow]")

if __name__ == "__main__":
    main()